
kallysally.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006aa8  08006aa8  00007aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b58  08006b58  00007b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b64  08006b64  00007b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006b68  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000078  08006be0  00008078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08006be0  00008314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f80  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e4  00000000  00000000  0001b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d14  00000000  00000000  0001e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269ce  00000000  00000000  0001f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001441b  00000000  00000000  00045daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbbd9  00000000  00000000  0005a1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155d9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d88  00000000  00000000  00155de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015ab6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006a8c 	.word	0x08006a8c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08006a8c 	.word	0x08006a8c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96a 	b.w	8001098 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	460c      	mov	r4, r1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d14e      	bne.n	8000e86 <__udivmoddi4+0xaa>
 8000de8:	4694      	mov	ip, r2
 8000dea:	458c      	cmp	ip, r1
 8000dec:	4686      	mov	lr, r0
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	d962      	bls.n	8000eba <__udivmoddi4+0xde>
 8000df4:	b14a      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	4319      	orrs	r1, r3
 8000e06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f f68c 	uxth.w	r6, ip
 8000e12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e22:	fb04 f106 	mul.w	r1, r4, r6
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d90a      	bls.n	8000e40 <__udivmoddi4+0x64>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e32:	f080 8112 	bcs.w	800105a <__udivmoddi4+0x27e>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 810f 	bls.w	800105a <__udivmoddi4+0x27e>
 8000e3c:	3c02      	subs	r4, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a59      	subs	r1, r3, r1
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e52:	fb00 f606 	mul.w	r6, r0, r6
 8000e56:	429e      	cmp	r6, r3
 8000e58:	d90a      	bls.n	8000e70 <__udivmoddi4+0x94>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e62:	f080 80fc 	bcs.w	800105e <__udivmoddi4+0x282>
 8000e66:	429e      	cmp	r6, r3
 8000e68:	f240 80f9 	bls.w	800105e <__udivmoddi4+0x282>
 8000e6c:	4463      	add	r3, ip
 8000e6e:	3802      	subs	r0, #2
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e76:	2100      	movs	r1, #0
 8000e78:	b11d      	cbz	r5, 8000e82 <__udivmoddi4+0xa6>
 8000e7a:	40d3      	lsrs	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d905      	bls.n	8000e96 <__udivmoddi4+0xba>
 8000e8a:	b10d      	cbz	r5, 8000e90 <__udivmoddi4+0xb4>
 8000e8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000e90:	2100      	movs	r1, #0
 8000e92:	4608      	mov	r0, r1
 8000e94:	e7f5      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000e96:	fab3 f183 	clz	r1, r3
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	d146      	bne.n	8000f2c <__udivmoddi4+0x150>
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xcc>
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	f0c0 80f0 	bcc.w	8001088 <__udivmoddi4+0x2ac>
 8000ea8:	1a86      	subs	r6, r0, r2
 8000eaa:	eb64 0303 	sbc.w	r3, r4, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d0e6      	beq.n	8000e82 <__udivmoddi4+0xa6>
 8000eb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb8:	e7e3      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	f040 8090 	bne.w	8000fe0 <__udivmoddi4+0x204>
 8000ec0:	eba1 040c 	sub.w	r4, r1, ip
 8000ec4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ed2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ed6:	fb08 4416 	mls	r4, r8, r6, r4
 8000eda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ede:	fb07 f006 	mul.w	r0, r7, r6
 8000ee2:	4298      	cmp	r0, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x11c>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x11a>
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	f200 80cd 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ef6:	4626      	mov	r6, r4
 8000ef8:	1a1c      	subs	r4, r3, r0
 8000efa:	fa1f f38e 	uxth.w	r3, lr
 8000efe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f02:	fb08 4410 	mls	r4, r8, r0, r4
 8000f06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f0a:	fb00 f707 	mul.w	r7, r0, r7
 8000f0e:	429f      	cmp	r7, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x148>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1a:	d202      	bcs.n	8000f22 <__udivmoddi4+0x146>
 8000f1c:	429f      	cmp	r7, r3
 8000f1e:	f200 80b0 	bhi.w	8001082 <__udivmoddi4+0x2a6>
 8000f22:	4620      	mov	r0, r4
 8000f24:	1bdb      	subs	r3, r3, r7
 8000f26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f2a:	e7a5      	b.n	8000e78 <__udivmoddi4+0x9c>
 8000f2c:	f1c1 0620 	rsb	r6, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 f706 	lsr.w	r7, r2, r6
 8000f36:	431f      	orrs	r7, r3
 8000f38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f40:	ea43 030c 	orr.w	r3, r3, ip
 8000f44:	40f4      	lsrs	r4, r6
 8000f46:	fa00 f801 	lsl.w	r8, r0, r1
 8000f4a:	0c38      	lsrs	r0, r7, #16
 8000f4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f50:	fbb4 fef0 	udiv	lr, r4, r0
 8000f54:	fa1f fc87 	uxth.w	ip, r7
 8000f58:	fb00 441e 	mls	r4, r0, lr, r4
 8000f5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f60:	fb0e f90c 	mul.w	r9, lr, ip
 8000f64:	45a1      	cmp	r9, r4
 8000f66:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6a:	d90a      	bls.n	8000f82 <__udivmoddi4+0x1a6>
 8000f6c:	193c      	adds	r4, r7, r4
 8000f6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f72:	f080 8084 	bcs.w	800107e <__udivmoddi4+0x2a2>
 8000f76:	45a1      	cmp	r9, r4
 8000f78:	f240 8081 	bls.w	800107e <__udivmoddi4+0x2a2>
 8000f7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f80:	443c      	add	r4, r7
 8000f82:	eba4 0409 	sub.w	r4, r4, r9
 8000f86:	fa1f f983 	uxth.w	r9, r3
 8000f8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000f92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x1d2>
 8000f9e:	193c      	adds	r4, r7, r4
 8000fa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fa4:	d267      	bcs.n	8001076 <__udivmoddi4+0x29a>
 8000fa6:	45a4      	cmp	ip, r4
 8000fa8:	d965      	bls.n	8001076 <__udivmoddi4+0x29a>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000fb6:	eba4 040c 	sub.w	r4, r4, ip
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	46ce      	mov	lr, r9
 8000fbe:	469c      	mov	ip, r3
 8000fc0:	d351      	bcc.n	8001066 <__udivmoddi4+0x28a>
 8000fc2:	d04e      	beq.n	8001062 <__udivmoddi4+0x286>
 8000fc4:	b155      	cbz	r5, 8000fdc <__udivmoddi4+0x200>
 8000fc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000fca:	eb64 040c 	sbc.w	r4, r4, ip
 8000fce:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd2:	40cb      	lsrs	r3, r1
 8000fd4:	431e      	orrs	r6, r3
 8000fd6:	40cc      	lsrs	r4, r1
 8000fd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	e750      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000fe0:	f1c2 0320 	rsb	r3, r2, #32
 8000fe4:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fec:	fa24 f303 	lsr.w	r3, r4, r3
 8000ff0:	4094      	lsls	r4, r2
 8000ff2:	430c      	orrs	r4, r1
 8000ff4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ffc:	fa1f f78c 	uxth.w	r7, ip
 8001000:	fbb3 f0f8 	udiv	r0, r3, r8
 8001004:	fb08 3110 	mls	r1, r8, r0, r3
 8001008:	0c23      	lsrs	r3, r4, #16
 800100a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800100e:	fb00 f107 	mul.w	r1, r0, r7
 8001012:	4299      	cmp	r1, r3
 8001014:	d908      	bls.n	8001028 <__udivmoddi4+0x24c>
 8001016:	eb1c 0303 	adds.w	r3, ip, r3
 800101a:	f100 36ff 	add.w	r6, r0, #4294967295
 800101e:	d22c      	bcs.n	800107a <__udivmoddi4+0x29e>
 8001020:	4299      	cmp	r1, r3
 8001022:	d92a      	bls.n	800107a <__udivmoddi4+0x29e>
 8001024:	3802      	subs	r0, #2
 8001026:	4463      	add	r3, ip
 8001028:	1a5b      	subs	r3, r3, r1
 800102a:	b2a4      	uxth	r4, r4
 800102c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001030:	fb08 3311 	mls	r3, r8, r1, r3
 8001034:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001038:	fb01 f307 	mul.w	r3, r1, r7
 800103c:	42a3      	cmp	r3, r4
 800103e:	d908      	bls.n	8001052 <__udivmoddi4+0x276>
 8001040:	eb1c 0404 	adds.w	r4, ip, r4
 8001044:	f101 36ff 	add.w	r6, r1, #4294967295
 8001048:	d213      	bcs.n	8001072 <__udivmoddi4+0x296>
 800104a:	42a3      	cmp	r3, r4
 800104c:	d911      	bls.n	8001072 <__udivmoddi4+0x296>
 800104e:	3902      	subs	r1, #2
 8001050:	4464      	add	r4, ip
 8001052:	1ae4      	subs	r4, r4, r3
 8001054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001058:	e739      	b.n	8000ece <__udivmoddi4+0xf2>
 800105a:	4604      	mov	r4, r0
 800105c:	e6f0      	b.n	8000e40 <__udivmoddi4+0x64>
 800105e:	4608      	mov	r0, r1
 8001060:	e706      	b.n	8000e70 <__udivmoddi4+0x94>
 8001062:	45c8      	cmp	r8, r9
 8001064:	d2ae      	bcs.n	8000fc4 <__udivmoddi4+0x1e8>
 8001066:	ebb9 0e02 	subs.w	lr, r9, r2
 800106a:	eb63 0c07 	sbc.w	ip, r3, r7
 800106e:	3801      	subs	r0, #1
 8001070:	e7a8      	b.n	8000fc4 <__udivmoddi4+0x1e8>
 8001072:	4631      	mov	r1, r6
 8001074:	e7ed      	b.n	8001052 <__udivmoddi4+0x276>
 8001076:	4603      	mov	r3, r0
 8001078:	e799      	b.n	8000fae <__udivmoddi4+0x1d2>
 800107a:	4630      	mov	r0, r6
 800107c:	e7d4      	b.n	8001028 <__udivmoddi4+0x24c>
 800107e:	46d6      	mov	lr, sl
 8001080:	e77f      	b.n	8000f82 <__udivmoddi4+0x1a6>
 8001082:	4463      	add	r3, ip
 8001084:	3802      	subs	r0, #2
 8001086:	e74d      	b.n	8000f24 <__udivmoddi4+0x148>
 8001088:	4606      	mov	r6, r0
 800108a:	4623      	mov	r3, r4
 800108c:	4608      	mov	r0, r1
 800108e:	e70f      	b.n	8000eb0 <__udivmoddi4+0xd4>
 8001090:	3e02      	subs	r6, #2
 8001092:	4463      	add	r3, ip
 8001094:	e730      	b.n	8000ef8 <__udivmoddi4+0x11c>
 8001096:	bf00      	nop

08001098 <__aeabi_idiv0>:
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <AMT_encoder_init>:
float ALPHA = 0.3f;									// smoothing param

//-------------------------------------------Function Code-------------------------------------------------------//

void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	213c      	movs	r1, #60	@ 0x3c
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fb2e 	bl	8004714 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <AMT_encoder_update>:

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	e9c7 2300 	strd	r2, r3, [r7]
	//collect data
	AMT_data->TimeStamp[QEI_NOW] = current_time;
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	601a      	str	r2, [r3, #0]

	//Postion 1 turn calculation
	AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a63      	ldr	r2, [pc, #396]	@ (8001288 <AMT_encoder_update+0x1b8>)
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001100:	fb01 f202 	mul.w	r2, r1, r2
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	621a      	str	r2, [r3, #32]

	//calculate dx
	diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	461a      	mov	r2, r3
 8001118:	4b5c      	ldr	r3, [pc, #368]	@ (800128c <AMT_encoder_update+0x1bc>)
 800111a:	601a      	str	r2, [r3, #0]

	//Handle Warp around
	if(diffPosition > 32767)
 800111c:	4b5b      	ldr	r3, [pc, #364]	@ (800128c <AMT_encoder_update+0x1bc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001124:	db06      	blt.n	8001134 <AMT_encoder_update+0x64>
		diffPosition -= 65535;
 8001126:	4b59      	ldr	r3, [pc, #356]	@ (800128c <AMT_encoder_update+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 800112e:	3bff      	subs	r3, #255	@ 0xff
 8001130:	4a56      	ldr	r2, [pc, #344]	@ (800128c <AMT_encoder_update+0x1bc>)
 8001132:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32767)
 8001134:	4b55      	ldr	r3, [pc, #340]	@ (800128c <AMT_encoder_update+0x1bc>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800113c:	dc06      	bgt.n	800114c <AMT_encoder_update+0x7c>
		diffPosition += 65535;
 800113e:	4b53      	ldr	r3, [pc, #332]	@ (800128c <AMT_encoder_update+0x1bc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001146:	33ff      	adds	r3, #255	@ 0xff
 8001148:	4a50      	ldr	r2, [pc, #320]	@ (800128c <AMT_encoder_update+0x1bc>)
 800114a:	6013      	str	r3, [r2, #0]

	//calculate dt
	diffTime = (AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV] );
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001158:	1a84      	subs	r4, r0, r2
 800115a:	eb61 0503 	sbc.w	r5, r1, r3
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff fddd 	bl	8000d20 <__aeabi_ul2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4a49      	ldr	r2, [pc, #292]	@ (8001290 <AMT_encoder_update+0x1c0>)
 800116a:	6013      	str	r3, [r2, #0]

	//calculate anglar velocity
	AMT_data->Angular_Velocity = (diffPosition * 60.0) / (cnt_per_rev * (diffTime / 1e6));	//RPM
 800116c:	4b47      	ldr	r3, [pc, #284]	@ (800128c <AMT_encoder_update+0x1bc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9a3 	bl	80004bc <__aeabi_i2d>
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b46      	ldr	r3, [pc, #280]	@ (8001294 <AMT_encoder_update+0x1c4>)
 800117c:	f7ff fa08 	bl	8000590 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4690      	mov	r8, r2
 8001186:	4699      	mov	r9, r3
 8001188:	4b3f      	ldr	r3, [pc, #252]	@ (8001288 <AMT_encoder_update+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f985 	bl	800049c <__aeabi_ui2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <AMT_encoder_update+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9a0 	bl	80004e0 <__aeabi_f2d>
 80011a0:	a337      	add	r3, pc, #220	@ (adr r3, 8001280 <AMT_encoder_update+0x1b0>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fb1d 	bl	80007e4 <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff f9ed 	bl	8000590 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4640      	mov	r0, r8
 80011bc:	4649      	mov	r1, r9
 80011be:	f7ff fb11 	bl	80007e4 <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc91 	bl	8000af0 <__aeabi_d2f>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	625a      	str	r2, [r3, #36]	@ 0x24

	// Calculate Linear
	AMT_data->Linear_Position += (diffPosition*pulley_cir)/cnt_per_rev;			//mm
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80011da:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <AMT_encoder_update+0x1bc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <AMT_encoder_update+0x1c8>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <AMT_encoder_update+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	AMT_data->Linear_Velocity = (AMT_data->Angular_Velocity / 60.0) * pulley_cir;		//mm/s
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f966 	bl	80004e0 <__aeabi_f2d>
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <AMT_encoder_update+0x1c4>)
 800121a:	f7ff fae3 	bl	80007e4 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4614      	mov	r4, r2
 8001224:	461d      	mov	r5, r3
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <AMT_encoder_update+0x1c8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f958 	bl	80004e0 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4620      	mov	r0, r4
 8001236:	4629      	mov	r1, r5
 8001238:	f7ff f9aa 	bl	8000590 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fc54 	bl	8000af0 <__aeabi_d2f>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
	AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity;					//Uodate Velo
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	619a      	str	r2, [r3, #24]
//	AMT_data->Linear_Acceleration = ((AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) *  1e6) / (diffTime);		//mm/s^2

	//store value for next loop
	AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	605a      	str	r2, [r3, #4]
	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	e9c1 2304 	strd	r2, r3, [r1, #16]
	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	61da      	str	r2, [r3, #28]
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	00000000 	.word	0x00000000
 8001284:	412e8480 	.word	0x412e8480
 8001288:	20000000 	.word	0x20000000
 800128c:	20000094 	.word	0x20000094
 8001290:	20000098 	.word	0x20000098
 8001294:	404e0000 	.word	0x404e0000
 8001298:	20000004 	.word	0x20000004

0800129c <KalmanFilter_Init>:
void Do_Predict_X(KalmanFilter* KF);
void Do_Predict_P(KalmanFilter* KF);
void Do_Result(KalmanFilter* KF);
void Run_KalmanFilter(KalmanFilter* KF);

void KalmanFilter_Init(KalmanFilter* KF, float* A_data, float *_B_data, float *_C_data, float *_G_data, float *_Q_data, float *_R_data){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b0da      	sub	sp, #360	@ 0x168
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 80012a6:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 80012aa:	6020      	str	r0, [r4, #0]
 80012ac:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80012b0:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 80012b4:	6001      	str	r1, [r0, #0]
 80012b6:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 80012ba:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80012be:	600a      	str	r2, [r1, #0]
 80012c0:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80012c4:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80012c8:	6013      	str	r3, [r2, #0]

//	*KF = &_KF;

	KF->A = matrix_init(4, 4, A_data);
 80012ca:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012d2:	681c      	ldr	r4, [r3, #0]
 80012d4:	4638      	mov	r0, r7
 80012d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2204      	movs	r2, #4
 80012e2:	2104      	movs	r1, #4
 80012e4:	f000 ff80 	bl	80021e8 <matrix_init>
 80012e8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012ec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80012f0:	4620      	mov	r0, r4
 80012f2:	4619      	mov	r1, r3
 80012f4:	2348      	movs	r3, #72	@ 0x48
 80012f6:	461a      	mov	r2, r3
 80012f8:	f004 fc5c 	bl	8005bb4 <memcpy>

	KF->B = matrix_init(4, 1, _B_data);
 80012fc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001300:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001304:	681c      	ldr	r4, [r3, #0]
 8001306:	4638      	mov	r0, r7
 8001308:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800130c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	2104      	movs	r1, #4
 8001316:	f000 ff67 	bl	80021e8 <matrix_init>
 800131a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800131e:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001322:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8001326:	4611      	mov	r1, r2
 8001328:	2248      	movs	r2, #72	@ 0x48
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fc42 	bl	8005bb4 <memcpy>

	KF->C = matrix_init(1, 4, _C_data);
 8001330:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001334:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001338:	681c      	ldr	r4, [r3, #0]
 800133a:	4638      	mov	r0, r7
 800133c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001340:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2204      	movs	r2, #4
 8001348:	2101      	movs	r1, #1
 800134a:	f000 ff4d 	bl	80021e8 <matrix_init>
 800134e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001352:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001356:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 800135a:	4611      	mov	r1, r2
 800135c:	2248      	movs	r2, #72	@ 0x48
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fc28 	bl	8005bb4 <memcpy>

	float _D_Data[4] = {0, 0, 0, 0};
 8001364:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
	KF->D = matrix_init(4, 1, &_D_Data);
 8001372:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001376:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800137a:	681c      	ldr	r4, [r3, #0]
 800137c:	4638      	mov	r0, r7
 800137e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001382:	2201      	movs	r2, #1
 8001384:	2104      	movs	r1, #4
 8001386:	f000 ff2f 	bl	80021e8 <matrix_init>
 800138a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800138e:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001392:	f104 03d8 	add.w	r3, r4, #216	@ 0xd8
 8001396:	4611      	mov	r1, r2
 8001398:	2248      	movs	r2, #72	@ 0x48
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fc0a 	bl	8005bb4 <memcpy>

	KF->G = matrix_init(4, 1, _G_data);
 80013a0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80013a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013a8:	681c      	ldr	r4, [r3, #0]
 80013aa:	4638      	mov	r0, r7
 80013ac:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80013b0:	2201      	movs	r2, #1
 80013b2:	2104      	movs	r1, #4
 80013b4:	f000 ff18 	bl	80021e8 <matrix_init>
 80013b8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80013bc:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80013c0:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 80013c4:	4611      	mov	r1, r2
 80013c6:	2248      	movs	r2, #72	@ 0x48
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fbf3 	bl	8005bb4 <memcpy>

	KF->Q = matrix_init(1, 1, _Q_data);
 80013ce:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80013d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013d6:	681c      	ldr	r4, [r3, #0]
 80013d8:	4638      	mov	r0, r7
 80013da:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80013de:	2201      	movs	r2, #1
 80013e0:	2101      	movs	r1, #1
 80013e2:	f000 ff01 	bl	80021e8 <matrix_init>
 80013e6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80013ea:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80013ee:	f504 73b4 	add.w	r3, r4, #360	@ 0x168
 80013f2:	4611      	mov	r1, r2
 80013f4:	2248      	movs	r2, #72	@ 0x48
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 fbdc 	bl	8005bb4 <memcpy>

	KF->R = matrix_init(1, 1, _R_data);
 80013fc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001400:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001404:	681c      	ldr	r4, [r3, #0]
 8001406:	4638      	mov	r0, r7
 8001408:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800140c:	2201      	movs	r2, #1
 800140e:	2101      	movs	r1, #1
 8001410:	f000 feea 	bl	80021e8 <matrix_init>
 8001414:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001418:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 800141c:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 8001420:	4611      	mov	r1, r2
 8001422:	2248      	movs	r2, #72	@ 0x48
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fbc5 	bl	8005bb4 <memcpy>

	float _S_Data[1] = {0};
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	KF->S = matrix_init(1, 1, &_S_Data);
 8001432:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001436:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	4638      	mov	r0, r7
 800143e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001442:	2201      	movs	r2, #1
 8001444:	2101      	movs	r1, #1
 8001446:	f000 fecf 	bl	80021e8 <matrix_init>
 800144a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800144e:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001452:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 8001456:	4611      	mov	r1, r2
 8001458:	2248      	movs	r2, #72	@ 0x48
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fbaa 	bl	8005bb4 <memcpy>

	float _P_old_Data[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8001460:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001464:	2240      	movs	r2, #64	@ 0x40
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fb71 	bl	8005b50 <memset>
	KF->P_old = matrix_init(4, 4, &_P_old_Data);
 800146e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001472:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001476:	681c      	ldr	r4, [r3, #0]
 8001478:	4638      	mov	r0, r7
 800147a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800147e:	2204      	movs	r2, #4
 8001480:	2104      	movs	r1, #4
 8001482:	f000 feb1 	bl	80021e8 <matrix_init>
 8001486:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800148a:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 800148e:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 8001492:	4611      	mov	r1, r2
 8001494:	2248      	movs	r2, #72	@ 0x48
 8001496:	4618      	mov	r0, r3
 8001498:	f004 fb8c 	bl	8005bb4 <memcpy>

	float _P_new_Data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800149c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a0:	2240      	movs	r2, #64	@ 0x40
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 fb53 	bl	8005b50 <memset>
	KF->P_new = matrix_init(4, 4, &_P_new_Data);
 80014aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014b2:	681c      	ldr	r4, [r3, #0]
 80014b4:	4638      	mov	r0, r7
 80014b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014ba:	2204      	movs	r2, #4
 80014bc:	2104      	movs	r1, #4
 80014be:	f000 fe93 	bl	80021e8 <matrix_init>
 80014c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014c6:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80014ca:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 80014ce:	4611      	mov	r1, r2
 80014d0:	2248      	movs	r2, #72	@ 0x48
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fb6e 	bl	8005bb4 <memcpy>

	float _K_Gain_Data[4] = {0, 0, 0, 0};
 80014d8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
	KF->K_gain = matrix_init(4, 1, &_K_Gain_Data);
 80014e6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014ee:	681c      	ldr	r4, [r3, #0]
 80014f0:	4638      	mov	r0, r7
 80014f2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80014f6:	2201      	movs	r2, #1
 80014f8:	2104      	movs	r1, #4
 80014fa:	f000 fe75 	bl	80021e8 <matrix_init>
 80014fe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001502:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001506:	f504 7334 	add.w	r3, r4, #720	@ 0x2d0
 800150a:	4611      	mov	r1, r2
 800150c:	2248      	movs	r2, #72	@ 0x48
 800150e:	4618      	mov	r0, r3
 8001510:	f004 fb50 	bl	8005bb4 <memcpy>

	float Y_Data[1] = {0};
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	KF->Y = matrix_init(1, 1, &Y_Data);
 800151c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001520:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001524:	681c      	ldr	r4, [r3, #0]
 8001526:	4638      	mov	r0, r7
 8001528:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800152c:	2201      	movs	r2, #1
 800152e:	2101      	movs	r1, #1
 8001530:	f000 fe5a 	bl	80021e8 <matrix_init>
 8001534:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001538:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 800153c:	f504 7346 	add.w	r3, r4, #792	@ 0x318
 8001540:	4611      	mov	r1, r2
 8001542:	2248      	movs	r2, #72	@ 0x48
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fb35 	bl	8005bb4 <memcpy>

	float Y_error_Data[1] = {0};
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	KF->Y_Error = matrix_init(1, 1, &Y_error_Data);
 8001552:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001556:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800155a:	681c      	ldr	r4, [r3, #0]
 800155c:	4638      	mov	r0, r7
 800155e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001562:	2201      	movs	r2, #1
 8001564:	2101      	movs	r1, #1
 8001566:	f000 fe3f 	bl	80021e8 <matrix_init>
 800156a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800156e:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001572:	f504 7358 	add.w	r3, r4, #864	@ 0x360
 8001576:	4611      	mov	r1, r2
 8001578:	2248      	movs	r2, #72	@ 0x48
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fb1a 	bl	8005bb4 <memcpy>

	float predictX_old_Data[4] = {0,0,0,0};
 8001580:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
	KF->predictX_old = matrix_init(4, 1, &predictX_old_Data);
 800158e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001592:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001596:	681c      	ldr	r4, [r3, #0]
 8001598:	4638      	mov	r0, r7
 800159a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800159e:	2201      	movs	r2, #1
 80015a0:	2104      	movs	r1, #4
 80015a2:	f000 fe21 	bl	80021e8 <matrix_init>
 80015a6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015aa:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80015ae:	f504 6390 	add.w	r3, r4, #1152	@ 0x480
 80015b2:	4611      	mov	r1, r2
 80015b4:	2248      	movs	r2, #72	@ 0x48
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 fafc 	bl	8005bb4 <memcpy>

	float X_correct_Data[4] = {0, 0, 0, 0};
 80015bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
	KF->X_correct = matrix_init(4, 1, &X_correct_Data);
 80015ca:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015d2:	681c      	ldr	r4, [r3, #0]
 80015d4:	4638      	mov	r0, r7
 80015d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015da:	2201      	movs	r2, #1
 80015dc:	2104      	movs	r1, #4
 80015de:	f000 fe03 	bl	80021e8 <matrix_init>
 80015e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015e6:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80015ea:	f504 736a 	add.w	r3, r4, #936	@ 0x3a8
 80015ee:	4611      	mov	r1, r2
 80015f0:	2248      	movs	r2, #72	@ 0x48
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fade 	bl	8005bb4 <memcpy>

	float _I44_Data[16] = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};
 80015f8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001600:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <KalmanFilter_Init+0x3f4>)
 8001602:	461c      	mov	r4, r3
 8001604:	4615      	mov	r5, r2
 8001606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001612:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	KF->I44 = matrix_init(4, 4, &_I44_Data);
 800161a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800161e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001622:	681c      	ldr	r4, [r3, #0]
 8001624:	4638      	mov	r0, r7
 8001626:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800162a:	2204      	movs	r2, #4
 800162c:	2104      	movs	r1, #4
 800162e:	f000 fddb 	bl	80021e8 <matrix_init>
 8001632:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001636:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 800163a:	f504 6399 	add.w	r3, r4, #1224	@ 0x4c8
 800163e:	4611      	mov	r1, r2
 8001640:	2248      	movs	r2, #72	@ 0x48
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fab6 	bl	8005bb4 <memcpy>

	float _U_Data[1] = {0};
 8001648:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800164c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
	KF->U = matrix_init(1, 1, &_U_Data);
 8001656:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800165a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800165e:	681c      	ldr	r4, [r3, #0]
 8001660:	4638      	mov	r0, r7
 8001662:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001666:	2201      	movs	r2, #1
 8001668:	2101      	movs	r1, #1
 800166a:	f000 fdbd 	bl	80021e8 <matrix_init>
 800166e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001672:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001676:	f504 63a2 	add.w	r3, r4, #1296	@ 0x510
 800167a:	4611      	mov	r1, r2
 800167c:	2248      	movs	r2, #72	@ 0x48
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fa98 	bl	8005bb4 <memcpy>

}
 8001684:	bf00      	nop
 8001686:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 800168a:	46bd      	mov	sp, r7
 800168c:	bdb0      	pop	{r4, r5, r7, pc}
 800168e:	bf00      	nop
 8001690:	08006aa8 	.word	0x08006aa8

08001694 <Do_Innovation_Covariance>:

void Do_Innovation_Covariance(KalmanFilter* KF){
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b0c9      	sub	sp, #292	@ 0x124
 8001698:	af00      	add	r7, sp, #0
 800169a:	64f8      	str	r0, [r7, #76]	@ 0x4c
	float __S_Data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800169c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80016a0:	2240      	movs	r2, #64	@ 0x40
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fa53 	bl	8005b50 <memset>
	matrix _S = matrix_init(4, 4, &__S_Data);
 80016aa:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80016ae:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80016b2:	2204      	movs	r2, #4
 80016b4:	2104      	movs	r1, #4
 80016b6:	f000 fd97 	bl	80021e8 <matrix_init>

	_S = matrix_multiply(&KF->C, &KF->P_old);
 80016ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016bc:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80016c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016c2:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 80016c6:	463b      	mov	r3, r7
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fea6 	bl	800241a <matrix_multiply>
 80016ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016d2:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80016d6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80016da:	4611      	mov	r1, r2
 80016dc:	2248      	movs	r2, #72	@ 0x48
 80016de:	4618      	mov	r0, r3
 80016e0:	f004 fa68 	bl	8005bb4 <memcpy>
	matrix C_transpose = matrix_transpose(&KF->C);
 80016e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016e6:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80016ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 ff3d 	bl	8002570 <matrix_transpose>
	_S = matrix_multiply(&_S, &C_transpose);
 80016f6:	463b      	mov	r3, r7
 80016f8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80016fc:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fe8a 	bl	800241a <matrix_multiply>
 8001706:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800170a:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800170e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001712:	4611      	mov	r1, r2
 8001714:	2248      	movs	r2, #72	@ 0x48
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fa4c 	bl	8005bb4 <memcpy>
	KF->S = matrix_plus(&_S, &KF->R);
 800171c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800171e:	f503 72d8 	add.w	r2, r3, #432	@ 0x1b0
 8001722:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001724:	463b      	mov	r3, r7
 8001726:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fdd7 	bl	80022de <matrix_plus>
 8001730:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001734:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8001738:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 800173c:	4611      	mov	r1, r2
 800173e:	2248      	movs	r2, #72	@ 0x48
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fa37 	bl	8005bb4 <memcpy>
}
 8001746:	bf00      	nop
 8001748:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}

08001750 <Do_Optimal_Kalman_Gain>:

void Do_Optimal_Kalman_Gain(KalmanFilter* KF){
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b0cb      	sub	sp, #300	@ 0x12c
 8001754:	af00      	add	r7, sp, #0
 8001756:	64f8      	str	r0, [r7, #76]	@ 0x4c
	matrix S_inverse = matrix_inverse(&KF->S);
 8001758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800175a:	f503 72fc 	add.w	r2, r3, #504	@ 0x1f8
 800175e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f000 ffe7 	bl	8002738 <matrix_inverse>
	matrix C_transpose = matrix_transpose(&KF->C);
 800176a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800176c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8001770:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fefa 	bl	8002570 <matrix_transpose>
	matrix K_gain_1 = matrix_multiply(&KF->P_old, &C_transpose);
 800177c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800177e:	f503 7110 	add.w	r1, r3, #576	@ 0x240
 8001782:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001786:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fe45 	bl	800241a <matrix_multiply>
	KF->K_gain = matrix_gain(&K_gain_1, S_inverse.data[0][0]);
 8001790:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8001794:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001796:	463b      	mov	r3, r7
 8001798:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fe9c 	bl	80024e0 <matrix_gain>
 80017a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017ac:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80017b0:	f504 7334 	add.w	r3, r4, #720	@ 0x2d0
 80017b4:	4611      	mov	r1, r2
 80017b6:	2248      	movs	r2, #72	@ 0x48
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 f9fb 	bl	8005bb4 <memcpy>
}
 80017be:	bf00      	nop
 80017c0:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <Do_Error_Y>:

void Do_Error_Y(KalmanFilter* KF){
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b0a7      	sub	sp, #156	@ 0x9c
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
	matrix Y_Error1 = matrix_multiply(&KF->C, &KF->predictX_old);
 80017d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017d2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80017d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017d8:	f503 6290 	add.w	r2, r3, #1152	@ 0x480
 80017dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fe1a 	bl	800241a <matrix_multiply>
	KF->Y_Error = matrix_minus(&KF->Y, &Y_Error1);
 80017e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017e8:	f503 7146 	add.w	r1, r3, #792	@ 0x318
 80017ec:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80017ee:	463b      	mov	r3, r7
 80017f0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fdc1 	bl	800237c <matrix_minus>
 80017fa:	f504 7358 	add.w	r3, r4, #864	@ 0x360
 80017fe:	4639      	mov	r1, r7
 8001800:	2248      	movs	r2, #72	@ 0x48
 8001802:	4618      	mov	r0, r3
 8001804:	f004 f9d6 	bl	8005bb4 <memcpy>
}
 8001808:	bf00      	nop
 800180a:	379c      	adds	r7, #156	@ 0x9c
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}

08001810 <Do_Correct_X>:

void Do_Correct_X(KalmanFilter* KF){
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b0a7      	sub	sp, #156	@ 0x9c
 8001814:	af00      	add	r7, sp, #0
 8001816:	64f8      	str	r0, [r7, #76]	@ 0x4c
	matrix X_correct1 = matrix_multiply(&KF->K_gain, &KF->Y_Error);
 8001818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800181a:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 800181e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001820:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 8001824:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fdf6 	bl	800241a <matrix_multiply>
	KF->X_correct = matrix_plus(&KF->predictX_old, &X_correct1);
 800182e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001830:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8001834:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001836:	463b      	mov	r3, r7
 8001838:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fd4e 	bl	80022de <matrix_plus>
 8001842:	f504 736a 	add.w	r3, r4, #936	@ 0x3a8
 8001846:	4639      	mov	r1, r7
 8001848:	2248      	movs	r2, #72	@ 0x48
 800184a:	4618      	mov	r0, r3
 800184c:	f004 f9b2 	bl	8005bb4 <memcpy>
}
 8001850:	bf00      	nop
 8001852:	379c      	adds	r7, #156	@ 0x9c
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <Do_Correct_P>:

void Do_Correct_P(KalmanFilter* KF){
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b0c9      	sub	sp, #292	@ 0x124
 800185c:	af00      	add	r7, sp, #0
 800185e:	64f8      	str	r0, [r7, #76]	@ 0x4c
	float _correctP_Data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001860:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001864:	2240      	movs	r2, #64	@ 0x40
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f004 f971 	bl	8005b50 <memset>
	matrix _correctP = matrix_init(4, 4, &_correctP_Data);
 800186e:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8001872:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001876:	2204      	movs	r2, #4
 8001878:	2104      	movs	r1, #4
 800187a:	f000 fcb5 	bl	80021e8 <matrix_init>
	matrix _correctP2 = matrix_multiply(&KF->K_gain, &KF->C);
 800187e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001880:	f503 7134 	add.w	r1, r3, #720	@ 0x2d0
 8001884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001886:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800188a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fdc3 	bl	800241a <matrix_multiply>

	_correctP = matrix_minus(&KF->I44, &_correctP2);
 8001894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001896:	f503 6199 	add.w	r1, r3, #1224	@ 0x4c8
 800189a:	463b      	mov	r3, r7
 800189c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fd6b 	bl	800237c <matrix_minus>
 80018a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018aa:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80018ae:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80018b2:	4611      	mov	r1, r2
 80018b4:	2248      	movs	r2, #72	@ 0x48
 80018b6:	4618      	mov	r0, r3
 80018b8:	f004 f97c 	bl	8005bb4 <memcpy>
	KF->P_correct = matrix_multiply(&_correctP, &KF->P_old);
 80018bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018be:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 80018c2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80018c4:	463b      	mov	r3, r7
 80018c6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fda5 	bl	800241a <matrix_multiply>
 80018d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018d4:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80018d8:	f504 737c 	add.w	r3, r4, #1008	@ 0x3f0
 80018dc:	4611      	mov	r1, r2
 80018de:	2248      	movs	r2, #72	@ 0x48
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 f967 	bl	8005bb4 <memcpy>
}
 80018e6:	bf00      	nop
 80018e8:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <Do_Predict_X>:

void Do_Predict_X(KalmanFilter* KF){
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b0d9      	sub	sp, #356	@ 0x164
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80018fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018fe:	6018      	str	r0, [r3, #0]
	float predictX_new_1_data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001900:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001904:	2240      	movs	r2, #64	@ 0x40
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f004 f921 	bl	8005b50 <memset>
	float predictX_new_2_data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800190e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001912:	2240      	movs	r2, #64	@ 0x40
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f004 f91a 	bl	8005b50 <memset>
	matrix _predictX_new_1 = matrix_init(4, 4, &predictX_new_1_data);
 800191c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8001920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001924:	2204      	movs	r2, #4
 8001926:	2104      	movs	r1, #4
 8001928:	f000 fc5e 	bl	80021e8 <matrix_init>
	matrix _predictX_new_2 = matrix_init(4, 4, &predictX_new_2_data);
 800192c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001930:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 8001934:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001938:	2204      	movs	r2, #4
 800193a:	2104      	movs	r1, #4
 800193c:	f000 fc54 	bl	80021e8 <matrix_init>

	_predictX_new_1 = matrix_multiply(&KF->A, &KF->X_correct); //edit
 8001940:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001944:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800194e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 726a 	add.w	r2, r3, #936	@ 0x3a8
 8001958:	463b      	mov	r3, r7
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd5d 	bl	800241a <matrix_multiply>
 8001960:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001964:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8001968:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800196c:	4611      	mov	r1, r2
 800196e:	2248      	movs	r2, #72	@ 0x48
 8001970:	4618      	mov	r0, r3
 8001972:	f004 f91f 	bl	8005bb4 <memcpy>
	_predictX_new_2 = matrix_multiply(&KF->B, &KF->U);
 8001976:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800197a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8001984:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001988:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8001992:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001996:	f5a3 7488 	sub.w	r4, r3, #272	@ 0x110
 800199a:	463b      	mov	r3, r7
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fd3c 	bl	800241a <matrix_multiply>
 80019a2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80019a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80019aa:	4620      	mov	r0, r4
 80019ac:	4619      	mov	r1, r3
 80019ae:	2348      	movs	r3, #72	@ 0x48
 80019b0:	461a      	mov	r2, r3
 80019b2:	f004 f8ff 	bl	8005bb4 <memcpy>
	KF->predictX_new = matrix_plus(&_predictX_new_1, &_predictX_new_2);
 80019b6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80019ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	463b      	mov	r3, r7
 80019c2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80019c6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fc87 	bl	80022de <matrix_plus>
 80019d0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80019d4:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 80019d8:	f504 6387 	add.w	r3, r4, #1080	@ 0x438
 80019dc:	4611      	mov	r1, r2
 80019de:	2248      	movs	r2, #72	@ 0x48
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 f8e7 	bl	8005bb4 <memcpy>
}
 80019e6:	bf00      	nop
 80019e8:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}

080019f0 <Do_Predict_P>:

void Do_Predict_P(KalmanFilter* KF){
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	f5ad 7d21 	sub.w	sp, sp, #644	@ 0x284
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80019fc:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001a00:	6018      	str	r0, [r3, #0]
	float predictP_new_1_data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001a02:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a06:	2240      	movs	r2, #64	@ 0x40
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 f8a0 	bl	8005b50 <memset>
	float predictP_new_2_data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a14:	2240      	movs	r2, #64	@ 0x40
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 f899 	bl	8005b50 <memset>
	matrix _predictP_new_1 = matrix_init(4, 4, &predictP_new_1_data);
 8001a1e:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8001a22:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a26:	2204      	movs	r2, #4
 8001a28:	2104      	movs	r1, #4
 8001a2a:	f000 fbdd 	bl	80021e8 <matrix_init>
	matrix _predictP_new_2 = matrix_init(4, 4, &predictP_new_2_data);
 8001a2e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a32:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	f000 fbd3 	bl	80021e8 <matrix_init>

	matrix A_transpose = matrix_transpose(&KF->A);
 8001a42:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a46:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a50:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fd8a 	bl	8002570 <matrix_transpose>
	matrix G_transpose = matrix_transpose(&KF->G);
 8001a5c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a60:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f503 7290 	add.w	r2, r3, #288	@ 0x120
 8001a6a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a6e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fd7b 	bl	8002570 <matrix_transpose>

	matrix _predictP_new_11 = matrix_multiply(&KF->A, &KF->P_correct); //edit
 8001a7a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a7e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001a82:	6819      	ldr	r1, [r3, #0]
 8001a84:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a88:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 727c 	add.w	r2, r3, #1008	@ 0x3f0
 8001a92:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001a96:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fcbd 	bl	800241a <matrix_multiply>
	matrix _predictP_new_21 = matrix_multiply(&KF->G, &KF->Q);
 8001aa0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001aa4:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f503 7190 	add.w	r1, r3, #288	@ 0x120
 8001aae:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001ab2:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001abc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001ac0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fca8 	bl	800241a <matrix_multiply>

	_predictP_new_1 = matrix_multiply(&_predictP_new_11, &A_transpose);
 8001aca:	463b      	mov	r3, r7
 8001acc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001ad0:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fca0 	bl	800241a <matrix_multiply>
 8001ada:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001ade:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8001ae2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 f862 	bl	8005bb4 <memcpy>
	_predictP_new_2 = matrix_multiply(&_predictP_new_21, &G_transpose);
 8001af0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001af4:	f5a3 7488 	sub.w	r4, r3, #272	@ 0x110
 8001af8:	463b      	mov	r3, r7
 8001afa:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8001afe:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fc89 	bl	800241a <matrix_multiply>
 8001b08:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001b0c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8001b10:	4620      	mov	r0, r4
 8001b12:	4619      	mov	r1, r3
 8001b14:	2348      	movs	r3, #72	@ 0x48
 8001b16:	461a      	mov	r2, r3
 8001b18:	f004 f84c 	bl	8005bb4 <memcpy>
	KF->P_new = matrix_plus(&_predictP_new_1, &_predictP_new_2);
 8001b1c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001b20:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001b24:	681c      	ldr	r4, [r3, #0]
 8001b26:	463b      	mov	r3, r7
 8001b28:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8001b2c:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fbd4 	bl	80022de <matrix_plus>
 8001b36:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8001b3a:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8001b3e:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 8001b42:	4611      	mov	r1, r2
 8001b44:	2248      	movs	r2, #72	@ 0x48
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 f834 	bl	8005bb4 <memcpy>

}
 8001b4c:	bf00      	nop
 8001b4e:	f507 7721 	add.w	r7, r7, #644	@ 0x284
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}

08001b56 <Do_Result>:

void Do_Result(KalmanFilter* KF){
 8001b56:	b590      	push	{r4, r7, lr}
 8001b58:	b0b9      	sub	sp, #228	@ 0xe4
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	KF->result_X = KF->predictX_new;
 8001b5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b62:	f502 60ab 	add.w	r0, r2, #1368	@ 0x558
 8001b66:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 8001b6a:	2248      	movs	r2, #72	@ 0x48
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f004 f821 	bl	8005bb4 <memcpy>
	matrix result_Y1 = matrix_multiply(&KF->C, &KF->predictX_new);
 8001b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b74:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8001b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b7a:	f503 6287 	add.w	r2, r3, #1080	@ 0x438
 8001b7e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fc49 	bl	800241a <matrix_multiply>
	matrix result_Y2 = matrix_multiply(&KF->D, &KF->U);
 8001b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b8a:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b90:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8001b94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fc3e 	bl	800241a <matrix_multiply>
	KF->result_Y = matrix_plus(&result_Y1, &result_Y2);
 8001b9e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001ba6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fb97 	bl	80022de <matrix_plus>
 8001bb0:	f504 63b4 	add.w	r3, r4, #1440	@ 0x5a0
 8001bb4:	4639      	mov	r1, r7
 8001bb6:	2248      	movs	r2, #72	@ 0x48
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fffb 	bl	8005bb4 <memcpy>
}
 8001bbe:	bf00      	nop
 8001bc0:	37e4      	adds	r7, #228	@ 0xe4
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}

08001bc6 <Run_KalmanFilter>:

void Run_KalmanFilter(KalmanFilter* KF){
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]

	// Correct
	Do_Innovation_Covariance(KF);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fd60 	bl	8001694 <Do_Innovation_Covariance>
	Do_Optimal_Kalman_Gain(KF);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fdbb 	bl	8001750 <Do_Optimal_Kalman_Gain>
	Do_Error_Y(KF);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fdf4 	bl	80017c8 <Do_Error_Y>
	Do_Correct_X(KF);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff fe15 	bl	8001810 <Do_Correct_X>
	Do_Correct_P(KF);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fe36 	bl	8001858 <Do_Correct_P>

	// Predict
	Do_Predict_X(KF);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fe7f 	bl	80018f0 <Do_Predict_X>
	Do_Predict_P(KF);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fefc 	bl	80019f0 <Do_Predict_P>
	Do_Result(KF);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ffac 	bl	8001b56 <Do_Result>

	//update
	KF->predictX_old = KF->predictX_new;
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f502 6090 	add.w	r0, r2, #1152	@ 0x480
 8001c06:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 8001c0a:	2248      	movs	r2, #72	@ 0x48
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f003 ffd1 	bl	8005bb4 <memcpy>
	KF->P_old = KF->P_new;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f502 7010 	add.w	r0, r2, #576	@ 0x240
 8001c1a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001c1e:	2248      	movs	r2, #72	@ 0x48
 8001c20:	4619      	mov	r1, r3
 8001c22:	f003 ffc7 	bl	8005bb4 <memcpy>

}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <Compute>:

void Compute(KalmanFilter* KF, double _position){ //, float _Vin
 8001c2e:	b590      	push	{r4, r7, lr}
 8001c30:	b0db      	sub	sp, #364	@ 0x16c
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c3c:	6018      	str	r0, [r3, #0]
 8001c3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c42:	ed83 0b00 	vstr	d0, [r3]

	//Update Observer and Command
//	KF->U_In[0] = _Vin;
	KF->Y_measure[0] = _position;
 8001c46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4e:	f7fe ff4f 	bl	8000af0 <__aeabi_d2f>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c58:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8001c62:	601a      	str	r2, [r3, #0]

	float ResultU_data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001c64:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001c68:	2240      	movs	r2, #64	@ 0x40
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 ff6f 	bl	8005b50 <memset>
	float ResultY_data[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001c72:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001c76:	2240      	movs	r2, #64	@ 0x40
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 ff68 	bl	8005b50 <memset>
	matrix ResultU = matrix_init(4, 4, &ResultU_data);
 8001c80:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8001c84:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001c88:	2204      	movs	r2, #4
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	f000 faac 	bl	80021e8 <matrix_init>
	matrix ResultY = matrix_init(4, 4, &ResultY_data);
 8001c90:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c94:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 8001c98:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	f000 faa2 	bl	80021e8 <matrix_init>

//	KF->U = matrix_update(&KF->U, &KF->U_In);
	KF->Y = matrix_update(&KF->Y, &KF->Y_measure);
 8001ca4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ca8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 7146 	add.w	r1, r3, #792	@ 0x318
 8001cb2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cb6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8001cc0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cc4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cc8:	681c      	ldr	r4, [r3, #0]
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 faca 	bl	8002266 <matrix_update>
 8001cd2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cd6:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001cda:	f504 7346 	add.w	r3, r4, #792	@ 0x318
 8001cde:	4611      	mov	r1, r2
 8001ce0:	2248      	movs	r2, #72	@ 0x48
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 ff66 	bl	8005bb4 <memcpy>

	//Kalmanfilter
	Run_KalmanFilter(KF);
 8001ce8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	f7ff ff68 	bl	8001bc6 <Run_KalmanFilter>

	//Estimate State
	KF->estimate_State[0] = KF->result_X.data[0][0];
 8001cf6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 63ac 	add.w	r3, r3, #1376	@ 0x560
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f503 63be 	add.w	r3, r3, #1520	@ 0x5f0
 8001d14:	601a      	str	r2, [r3, #0]
	KF->estimate_State[1] = KF->result_X.data[1][0];
 8001d16:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 63ae 	add.w	r3, r3, #1392	@ 0x570
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8001d34:	601a      	str	r2, [r3, #0]
	KF->estimate_State[2] = KF->result_X.data[2][0];
 8001d36:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 63bf 	add.w	r3, r3, #1528	@ 0x5f8
 8001d54:	601a      	str	r2, [r3, #0]
	KF->estimate_State[3] = KF->result_X.data[3][0];
 8001d56:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f203 53fc 	addw	r3, r3, #1532	@ 0x5fc
 8001d74:	601a      	str	r2, [r3, #0]

//  return KF->estimate_State;
}
 8001d76:	bf00      	nop
 8001d78:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d84:	f2ad 7d44 	subw	sp, sp, #1860	@ 0x744
 8001d88:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d8a:	f000 ff6e 	bl	8002c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8e:	f000 f865 	bl	8001e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d92:	f000 f99b 	bl	80020cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001d96:	f000 f8ad 	bl	8001ef4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001d9a:	f000 f8f5 	bl	8001f88 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001d9e:	f000 f947 	bl	8002030 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 8001da2:	482b      	ldr	r0, [pc, #172]	@ (8001e50 <main+0xd0>)
 8001da4:	f002 fb28 	bl	80043f8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);				// Micros
 8001da8:	482a      	ldr	r0, [pc, #168]	@ (8001e54 <main+0xd4>)
 8001daa:	f002 fb95 	bl	80044d8 <HAL_TIM_Base_Start_IT>

  AMT_Encoder AMT;
  KalmanFilter Kally;
  AMT_encoder_init(&AMT, &htim2);
 8001dae:	f507 63de 	add.w	r3, r7, #1776	@ 0x6f0
 8001db2:	4927      	ldr	r1, [pc, #156]	@ (8001e50 <main+0xd0>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f971 	bl	800109c <AMT_encoder_init>
  float B_matrix[10] ;
  float C_matrix[10] ;
  float G_matrix[10] ;
  float Q_matrix[10] ;
  float R_matrix[10] ;
  KalmanFilter_Init(&Kally, A_matrix, B_matrix, C_matrix, G_matrix, Q_matrix, R_matrix);
 8001dba:	f107 0678 	add.w	r6, r7, #120	@ 0x78
 8001dbe:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001dc2:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8001dc6:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8001dca:	463b      	mov	r3, r7
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4633      	mov	r3, r6
 8001ddc:	f7ff fa5e 	bl	800129c <KalmanFilter_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp =0;
		  int64_t currentTime = HAL_GetTick();
 8001de0:	f000 ffa8 	bl	8002d34 <HAL_GetTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2200      	movs	r2, #0
 8001de8:	4698      	mov	r8, r3
 8001dea:	4691      	mov	r9, r2
 8001dec:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8001df0:	e9c3 8900 	strd	r8, r9, [r3]
		  if(currentTime > timestamp)
 8001df4:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	4916      	ldr	r1, [pc, #88]	@ (8001e58 <main+0xd8>)
 8001dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e02:	4290      	cmp	r0, r2
 8001e04:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e08:	d214      	bcs.n	8001e34 <main+0xb4>
		  {
		  timestamp =currentTime + 1;				//ms
 8001e0a:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	1c54      	adds	r4, r2, #1
 8001e14:	f143 0500 	adc.w	r5, r3, #0
 8001e18:	4622      	mov	r2, r4
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	490e      	ldr	r1, [pc, #56]	@ (8001e58 <main+0xd8>)
 8001e1e:	e9c1 2300 	strd	r2, r3, [r1]
		  AMT_encoder_update(&AMT, &htim2, micros());
 8001e22:	f000 f9c1 	bl	80021a8 <micros>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	f507 60de 	add.w	r0, r7, #1776	@ 0x6f0
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <main+0xd0>)
 8001e30:	f7ff f94e 	bl	80010d0 <AMT_encoder_update>
		  }
	Compute(&Kally, AMT.Linear_Position);
 8001e34:	f507 63e4 	add.w	r3, r7, #1824	@ 0x720
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb50 	bl	80004e0 <__aeabi_f2d>
 8001e40:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001e44:	ec41 0b10 	vmov	d0, r0, r1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fef0 	bl	8001c2e <Compute>
  {
 8001e4e:	e7c7      	b.n	8001de0 <main+0x60>
 8001e50:	20000130 	.word	0x20000130
 8001e54:	2000017c 	.word	0x2000017c
 8001e58:	200001d0 	.word	0x200001d0

08001e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b094      	sub	sp, #80	@ 0x50
 8001e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0318 	add.w	r3, r7, #24
 8001e66:	2238      	movs	r2, #56	@ 0x38
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fe70 	bl	8005b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f001 fa32 	bl	80032e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e8e:	2340      	movs	r3, #64	@ 0x40
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e92:	2302      	movs	r3, #2
 8001e94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e96:	2302      	movs	r3, #2
 8001e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e9e:	2355      	movs	r3, #85	@ 0x55
 8001ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 facc 	bl	8003450 <HAL_RCC_OscConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ebe:	f000 f98d 	bl	80021dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 fdca 	bl	8003a74 <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ee6:	f000 f979 	bl	80021dc <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	@ 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ef8:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001efa:	4a22      	ldr	r2, [pc, #136]	@ (8001f84 <MX_LPUART1_UART_Init+0x90>)
 8001efc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f24:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f36:	4812      	ldr	r0, [pc, #72]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f38:	f002 ff9c 	bl	8004e74 <HAL_UART_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f42:	f000 f94b 	bl	80021dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f46:	2100      	movs	r1, #0
 8001f48:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f4a:	f003 fd37 	bl	80059bc <HAL_UARTEx_SetTxFifoThreshold>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f54:	f000 f942 	bl	80021dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f5c:	f003 fd6c 	bl	8005a38 <HAL_UARTEx_SetRxFifoThreshold>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f66:	f000 f939 	bl	80021dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_LPUART1_UART_Init+0x8c>)
 8001f6c:	f003 fced 	bl	800594a <HAL_UARTEx_DisableFifoMode>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f76:	f000 f931 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000009c 	.word	0x2000009c
 8001f84:	40008000 	.word	0x40008000

08001f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	@ 0x30
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2224      	movs	r2, #36	@ 0x24
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fdda 	bl	8005b50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <MX_TIM2_Init+0xa4>)
 8001fa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <MX_TIM2_Init+0xa4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <MX_TIM2_Init+0xa4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <MX_TIM2_Init+0xa4>)
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <MX_TIM2_Init+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b18      	ldr	r3, [pc, #96]	@ (800202c <MX_TIM2_Init+0xa4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480c      	ldr	r0, [pc, #48]	@ (800202c <MX_TIM2_Init+0xa4>)
 8001ffa:	f002 fae5 	bl	80045c8 <HAL_TIM_Encoder_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002004:	f000 f8ea 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002010:	463b      	mov	r3, r7
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	@ (800202c <MX_TIM2_Init+0xa4>)
 8002016:	f002 fe97 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002020:	f000 f8dc 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	3730      	adds	r7, #48	@ 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000130 	.word	0x20000130

08002030 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_TIM5_Init+0x94>)
 8002050:	4a1d      	ldr	r2, [pc, #116]	@ (80020c8 <MX_TIM5_Init+0x98>)
 8002052:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <MX_TIM5_Init+0x94>)
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_TIM5_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <MX_TIM5_Init+0x94>)
 8002062:	f04f 32ff 	mov.w	r2, #4294967295
 8002066:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002068:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_TIM5_Init+0x94>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <MX_TIM5_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002074:	4813      	ldr	r0, [pc, #76]	@ (80020c4 <MX_TIM5_Init+0x94>)
 8002076:	f002 f967 	bl	8004348 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002080:	f000 f8ac 	bl	80021dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002088:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4619      	mov	r1, r3
 8002090:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <MX_TIM5_Init+0x94>)
 8002092:	f002 fbcd 	bl	8004830 <HAL_TIM_ConfigClockSource>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800209c:	f000 f89e 	bl	80021dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_TIM5_Init+0x94>)
 80020ae:	f002 fe4b 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80020b8:	f000 f890 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000017c 	.word	0x2000017c
 80020c8:	40000c00 	.word	0x40000c00

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a2e      	ldr	r2, [pc, #184]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b2c      	ldr	r3, [pc, #176]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fa:	4b29      	ldr	r3, [pc, #164]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	4a28      	ldr	r2, [pc, #160]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 8002100:	f043 0320 	orr.w	r3, r3, #32
 8002104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a22      	ldr	r2, [pc, #136]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002136:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <MX_GPIO_Init+0xd4>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2120      	movs	r1, #32
 8002146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214a:	f001 f891 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800214e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	480f      	ldr	r0, [pc, #60]	@ (80021a4 <MX_GPIO_Init+0xd8>)
 8002166:	f000 ff01 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800216a:	2320      	movs	r3, #32
 800216c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002184:	f000 fef2 	bl	8002f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2028      	movs	r0, #40	@ 0x28
 800218e:	f000 feb8 	bl	8002f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002192:	2028      	movs	r0, #40	@ 0x28
 8002194:	f000 fecf 	bl	8002f36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	@ 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48000800 	.word	0x48000800

080021a8 <micros>:
			_micros += UINT32_MAX;
			}
	}

uint64_t micros()
	{
 80021a8:	b4b0      	push	{r4, r5, r7}
 80021aa:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <micros+0x2c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	2200      	movs	r2, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	4611      	mov	r1, r2
 80021b8:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <micros+0x30>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	1884      	adds	r4, r0, r2
 80021c0:	eb41 0503 	adc.w	r5, r1, r3
 80021c4:	4622      	mov	r2, r4
 80021c6:	462b      	mov	r3, r5
	}
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bcb0      	pop	{r4, r5, r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000017c 	.word	0x2000017c
 80021d8:	200001c8 	.word	0x200001c8

080021dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <Error_Handler+0x8>

080021e8 <matrix_init>:
//matrix matrix_transpose(matrix* in);
//float matrix_determinant(matrix* in);
//matrix matrix_inverse(matrix* in);
//matrix matrix_update(matrix* in,float* _update);

matrix matrix_init(int row, int col, float *_data_in){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b098      	sub	sp, #96	@ 0x60
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
	matrix result;
	result.d_row = row;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	613b      	str	r3, [r7, #16]
	result.d_col = col;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < row; i++){
 80021fe:	2300      	movs	r3, #0
 8002200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002202:	e020      	b.n	8002246 <matrix_init+0x5e>
		for (int j = 0; j < col; ++j){
 8002204:	2300      	movs	r3, #0
 8002206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002208:	e016      	b.n	8002238 <matrix_init+0x50>
			result.data[i][j] = _data_in[i * col + j];
 800220a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	fb03 f202 	mul.w	r2, r3, r2
 8002212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002220:	0099      	lsls	r1, r3, #2
 8002222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002224:	440b      	add	r3, r1
 8002226:	3302      	adds	r3, #2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	3360      	adds	r3, #96	@ 0x60
 800222c:	443b      	add	r3, r7
 800222e:	3b50      	subs	r3, #80	@ 0x50
 8002230:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < col; ++j){
 8002232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002234:	3301      	adds	r3, #1
 8002236:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002238:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbe4      	blt.n	800220a <matrix_init+0x22>
	for (int i = 0; i < row; i++){
 8002240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002242:	3301      	adds	r3, #1
 8002244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002246:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	429a      	cmp	r2, r3
 800224c:	dbda      	blt.n	8002204 <matrix_init+0x1c>
		}
	}

	return result;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4618      	mov	r0, r3
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	2248      	movs	r2, #72	@ 0x48
 8002258:	4619      	mov	r1, r3
 800225a:	f003 fcab 	bl	8005bb4 <memcpy>
}
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	3760      	adds	r7, #96	@ 0x60
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <matrix_update>:

matrix matrix_update(matrix* in,float* _update){
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < in->d_row; i++){
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e021      	b.n	80022bc <matrix_update+0x56>
		for (int j = 0; j < in->d_col; j++){
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e016      	b.n	80022ac <matrix_update+0x46>
			in->data[i][j] = _update[i * in->d_col + j];
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	fb03 f202 	mul.w	r2, r3, r2
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	0098      	lsls	r0, r3, #2
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4403      	add	r3, r0
 800229e:	3302      	adds	r3, #2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < in->d_col; j++){
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3301      	adds	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dbe3      	blt.n	800227e <matrix_update+0x18>
	for (int i = 0; i < in->d_row; i++){
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dbd8      	blt.n	8002278 <matrix_update+0x12>
		}
	}
	return *in;
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	2348      	movs	r3, #72	@ 0x48
 80022d0:	461a      	mov	r2, r3
 80022d2:	f003 fc6f 	bl	8005bb4 <memcpy>
}
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <matrix_plus>:

matrix matrix_plus(matrix* in1, matrix* in2){
 80022de:	b580      	push	{r7, lr}
 80022e0:	b098      	sub	sp, #96	@ 0x60
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
	matrix result;
	result.d_row = in1->d_row;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	613b      	str	r3, [r7, #16]
	result.d_col = in1->d_col;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	617b      	str	r3, [r7, #20]

	for (int row = 0; row < in1->d_row; row++){
 80022f6:	2300      	movs	r3, #0
 80022f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022fa:	e02e      	b.n	800235a <matrix_plus+0x7c>
		for (int col = 0; col < in1->d_col; col++){
 80022fc:	2300      	movs	r3, #0
 80022fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002300:	e023      	b.n	800234a <matrix_plus+0x6c>
			result.data[row][col] = in1->data[row][col] + in2->data[row][col];
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002306:	0099      	lsls	r1, r3, #2
 8002308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800230a:	440b      	add	r3, r1
 800230c:	3302      	adds	r3, #2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	ed93 7a00 	vldr	s14, [r3]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800231e:	440b      	add	r3, r1
 8002320:	3302      	adds	r3, #2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002334:	4413      	add	r3, r2
 8002336:	3302      	adds	r3, #2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3360      	adds	r3, #96	@ 0x60
 800233c:	443b      	add	r3, r7
 800233e:	3b50      	subs	r3, #80	@ 0x50
 8002340:	edc3 7a00 	vstr	s15, [r3]
		for (int col = 0; col < in1->d_col; col++){
 8002344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002346:	3301      	adds	r3, #1
 8002348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002350:	429a      	cmp	r2, r3
 8002352:	dbd6      	blt.n	8002302 <matrix_plus+0x24>
	for (int row = 0; row < in1->d_row; row++){
 8002354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002356:	3301      	adds	r3, #1
 8002358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002360:	429a      	cmp	r2, r3
 8002362:	dbcb      	blt.n	80022fc <matrix_plus+0x1e>
		}
	}

	return result;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2248      	movs	r2, #72	@ 0x48
 800236e:	4619      	mov	r1, r3
 8002370:	f003 fc20 	bl	8005bb4 <memcpy>
}
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	3760      	adds	r7, #96	@ 0x60
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <matrix_minus>:

matrix matrix_minus(matrix* in1, matrix* in2){
 800237c:	b580      	push	{r7, lr}
 800237e:	b098      	sub	sp, #96	@ 0x60
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
	matrix result;
	result.d_row = in1->d_row;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	613b      	str	r3, [r7, #16]
	result.d_col = in1->d_col;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	617b      	str	r3, [r7, #20]

	for (int row = 0; row < in1->d_row; row++){
 8002394:	2300      	movs	r3, #0
 8002396:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002398:	e02e      	b.n	80023f8 <matrix_minus+0x7c>
		for (int col = 0; col < in1->d_col; col++){
 800239a:	2300      	movs	r3, #0
 800239c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800239e:	e023      	b.n	80023e8 <matrix_minus+0x6c>
			result.data[row][col] = in1->data[row][col] - in2->data[row][col];
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023a4:	0099      	lsls	r1, r3, #2
 80023a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023a8:	440b      	add	r3, r1
 80023aa:	3302      	adds	r3, #2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	ed93 7a00 	vldr	s14, [r3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b8:	0099      	lsls	r1, r3, #2
 80023ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023bc:	440b      	add	r3, r1
 80023be:	3302      	adds	r3, #2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023d2:	4413      	add	r3, r2
 80023d4:	3302      	adds	r3, #2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	3360      	adds	r3, #96	@ 0x60
 80023da:	443b      	add	r3, r7
 80023dc:	3b50      	subs	r3, #80	@ 0x50
 80023de:	edc3 7a00 	vstr	s15, [r3]
		for (int col = 0; col < in1->d_col; col++){
 80023e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023e4:	3301      	adds	r3, #1
 80023e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dbd6      	blt.n	80023a0 <matrix_minus+0x24>
	for (int row = 0; row < in1->d_row; row++){
 80023f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023f4:	3301      	adds	r3, #1
 80023f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbcb      	blt.n	800239a <matrix_minus+0x1e>
		}
	}

	return result;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4618      	mov	r0, r3
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	2248      	movs	r2, #72	@ 0x48
 800240c:	4619      	mov	r1, r3
 800240e:	f003 fbd1 	bl	8005bb4 <memcpy>
}
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	3760      	adds	r7, #96	@ 0x60
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <matrix_multiply>:

matrix matrix_multiply(matrix* in1, matrix* in2){
 800241a:	b580      	push	{r7, lr}
 800241c:	b09a      	sub	sp, #104	@ 0x68
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
	matrix result;
	result.d_row = in1->d_row;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	613b      	str	r3, [r7, #16]
	result.d_col = in2->d_col;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	617b      	str	r3, [r7, #20]

	for (int m = 0; m < in1->d_row; m++) {
 8002432:	2300      	movs	r3, #0
 8002434:	667b      	str	r3, [r7, #100]	@ 0x64
 8002436:	e042      	b.n	80024be <matrix_multiply+0xa4>
		for (int n = 0; n < in2->d_col; n++) {
 8002438:	2300      	movs	r3, #0
 800243a:	663b      	str	r3, [r7, #96]	@ 0x60
 800243c:	e037      	b.n	80024ae <matrix_multiply+0x94>
			float total = 0;
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	65fb      	str	r3, [r7, #92]	@ 0x5c
			for (int k = 0; k < in1->d_col; k++) {
 8002444:	2300      	movs	r3, #0
 8002446:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002448:	e01e      	b.n	8002488 <matrix_multiply+0x6e>
				total = total + (in1->data[m][k] * in2->data[k][n]);
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800244e:	0099      	lsls	r1, r3, #2
 8002450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002452:	440b      	add	r3, r1
 8002454:	3302      	adds	r3, #2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	ed93 7a00 	vldr	s14, [r3]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002466:	440b      	add	r3, r1
 8002468:	3302      	adds	r3, #2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
			for (int k = 0; k < in1->d_col; k++) {
 8002482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002484:	3301      	adds	r3, #1
 8002486:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800248e:	429a      	cmp	r2, r3
 8002490:	dbdb      	blt.n	800244a <matrix_multiply+0x30>
			}
			result.data[m][n] = total;
 8002492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002494:	009a      	lsls	r2, r3, #2
 8002496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002498:	4413      	add	r3, r2
 800249a:	3302      	adds	r3, #2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	3368      	adds	r3, #104	@ 0x68
 80024a0:	443b      	add	r3, r7
 80024a2:	3b58      	subs	r3, #88	@ 0x58
 80024a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80024a6:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < in2->d_col; n++) {
 80024a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024aa:	3301      	adds	r3, #1
 80024ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbc2      	blt.n	800243e <matrix_multiply+0x24>
	for (int m = 0; m < in1->d_row; m++) {
 80024b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ba:	3301      	adds	r3, #1
 80024bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80024c4:	429a      	cmp	r2, r3
 80024c6:	dbb7      	blt.n	8002438 <matrix_multiply+0x1e>
		}
	}

	return result;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	2248      	movs	r2, #72	@ 0x48
 80024d2:	4619      	mov	r1, r3
 80024d4:	f003 fb6e 	bl	8005bb4 <memcpy>
}
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	3768      	adds	r7, #104	@ 0x68
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <matrix_gain>:

matrix matrix_gain(matrix* in,float gain){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b098      	sub	sp, #96	@ 0x60
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	ed87 0a01 	vstr	s0, [r7, #4]
	matrix result;
	result.d_row = in->d_row;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	613b      	str	r3, [r7, #16]
	result.d_col = in->d_col;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	617b      	str	r3, [r7, #20]

	for (int m = 0; m < in->d_row; m++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024fe:	e026      	b.n	800254e <matrix_gain+0x6e>
		for (int n = 0; n < in->d_col; n++) {
 8002500:	2300      	movs	r3, #0
 8002502:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002504:	e01b      	b.n	800253e <matrix_gain+0x5e>
			result.data[m][n] = in->data[m][n]*gain;
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800250a:	0099      	lsls	r1, r3, #2
 800250c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800250e:	440b      	add	r3, r1
 8002510:	3302      	adds	r3, #2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	edd7 7a01 	vldr	s15, [r7, #4]
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002528:	4413      	add	r3, r2
 800252a:	3302      	adds	r3, #2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	3360      	adds	r3, #96	@ 0x60
 8002530:	443b      	add	r3, r7
 8002532:	3b50      	subs	r3, #80	@ 0x50
 8002534:	edc3 7a00 	vstr	s15, [r3]
		for (int n = 0; n < in->d_col; n++) {
 8002538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800253a:	3301      	adds	r3, #1
 800253c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002544:	429a      	cmp	r2, r3
 8002546:	dbde      	blt.n	8002506 <matrix_gain+0x26>
	for (int m = 0; m < in->d_row; m++) {
 8002548:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800254a:	3301      	adds	r3, #1
 800254c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002554:	429a      	cmp	r2, r3
 8002556:	dbd3      	blt.n	8002500 <matrix_gain+0x20>
		}
	}

	return result;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4618      	mov	r0, r3
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	2248      	movs	r2, #72	@ 0x48
 8002562:	4619      	mov	r1, r3
 8002564:	f003 fb26 	bl	8005bb4 <memcpy>
}
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	3760      	adds	r7, #96	@ 0x60
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <matrix_transpose>:

matrix matrix_transpose(matrix* in){
 8002570:	b580      	push	{r7, lr}
 8002572:	b096      	sub	sp, #88	@ 0x58
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
	matrix result;
	result.d_row = in->d_col;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60bb      	str	r3, [r7, #8]
	result.d_col = in->d_row;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]

	for (int m = 0; m < in->d_row; m++) {
 8002586:	2300      	movs	r3, #0
 8002588:	657b      	str	r3, [r7, #84]	@ 0x54
 800258a:	e020      	b.n	80025ce <matrix_transpose+0x5e>
		for (int n = 0; n < in->d_col; n++) {
 800258c:	2300      	movs	r3, #0
 800258e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002590:	e015      	b.n	80025be <matrix_transpose+0x4e>
			result.data[n][m] = in->data[m][n];
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002596:	0099      	lsls	r1, r3, #2
 8002598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800259a:	440b      	add	r3, r1
 800259c:	3302      	adds	r3, #2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025aa:	440b      	add	r3, r1
 80025ac:	3302      	adds	r3, #2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3358      	adds	r3, #88	@ 0x58
 80025b2:	443b      	add	r3, r7
 80025b4:	3b50      	subs	r3, #80	@ 0x50
 80025b6:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < in->d_col; n++) {
 80025b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ba:	3301      	adds	r3, #1
 80025bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80025c4:	429a      	cmp	r2, r3
 80025c6:	dbe4      	blt.n	8002592 <matrix_transpose+0x22>
	for (int m = 0; m < in->d_row; m++) {
 80025c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ca:	3301      	adds	r3, #1
 80025cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dbd9      	blt.n	800258c <matrix_transpose+0x1c>
		}
	}

	return result;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	2248      	movs	r2, #72	@ 0x48
 80025e2:	4619      	mov	r1, r3
 80025e4:	f003 fae6 	bl	8005bb4 <memcpy>
}
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	3758      	adds	r7, #88	@ 0x58
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <matrix_determinant>:

float matrix_determinant(matrix* in){
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	float det_val = 0;
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
	if (in->d_row == 3 && in->d_col == 3){
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d168      	bne.n	80026d8 <matrix_determinant+0xe8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d164      	bne.n	80026d8 <matrix_determinant+0xe8>
		for (int i = 0; i < 3; i++){
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	e05d      	b.n	80026d0 <matrix_determinant+0xe0>
			det_val = det_val + (in->data[0][i] * (in->data[1][(i + 1) % 3] * in->data[2][(i + 2) % 3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3302      	adds	r3, #2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	ed93 7a00 	vldr	s14, [r3]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <matrix_determinant+0x13c>)
 8002628:	fb83 3201 	smull	r3, r2, r3, r1
 800262c:	17cb      	asrs	r3, r1, #31
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	1aca      	subs	r2, r1, r3
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	1d93      	adds	r3, r2, #6
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	edd3 6a00 	vldr	s13, [r3]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1c99      	adds	r1, r3, #2
 8002648:	4b38      	ldr	r3, [pc, #224]	@ (800272c <matrix_determinant+0x13c>)
 800264a:	fb83 3201 	smull	r3, r2, r3, r1
 800264e:	17cb      	asrs	r3, r1, #31
 8002650:	1ad2      	subs	r2, r2, r3
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	1aca      	subs	r2, r1, r3
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f102 030a 	add.w	r3, r2, #10
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee66 6aa7 	vmul.f32	s13, s13, s15
								- in->data[1][(i + 2) % 3] * in->data[2][(i + 1) % 3]));
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1c99      	adds	r1, r3, #2
 8002670:	4b2e      	ldr	r3, [pc, #184]	@ (800272c <matrix_determinant+0x13c>)
 8002672:	fb83 3201 	smull	r3, r2, r3, r1
 8002676:	17cb      	asrs	r3, r1, #31
 8002678:	1ad2      	subs	r2, r2, r3
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	1aca      	subs	r2, r1, r3
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	1d93      	adds	r3, r2, #6
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	ed93 6a00 	vldr	s12, [r3]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1c59      	adds	r1, r3, #1
 8002692:	4b26      	ldr	r3, [pc, #152]	@ (800272c <matrix_determinant+0x13c>)
 8002694:	fb83 3201 	smull	r3, r2, r3, r1
 8002698:	17cb      	asrs	r3, r1, #31
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	1aca      	subs	r2, r1, r3
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	f102 030a 	add.w	r3, r2, #10
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
			det_val = det_val + (in->data[0][i] * (in->data[1][(i + 1) % 3] * in->data[2][(i + 2) % 3]
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	ed97 7a03 	vldr	s14, [r7, #12]
 80026c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c6:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < 3; i++){
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	dd9e      	ble.n	8002614 <matrix_determinant+0x24>
 80026d6:	e01e      	b.n	8002716 <matrix_determinant+0x126>
		}
	}
	else if (in->d_row == 2 && in->d_col == 2){
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d118      	bne.n	8002712 <matrix_determinant+0x122>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d114      	bne.n	8002712 <matrix_determinant+0x122>
		det_val = (in->data[0][0] * in->data[1][1]) - (in->data[0][1] * in->data[1][0]);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80026f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	edd3 6a03 	vldr	s13, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	edd3 7a06 	vldr	s15, [r3, #24]
 8002704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270c:	edc7 7a03 	vstr	s15, [r7, #12]
 8002710:	e001      	b.n	8002716 <matrix_determinant+0x126>
	}
	else
		det_val = 10;
 8002712:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <matrix_determinant+0x140>)
 8002714:	60fb      	str	r3, [r7, #12]

	return det_val;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	ee07 3a90 	vmov	s15, r3
}
 800271c:	eeb0 0a67 	vmov.f32	s0, s15
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	55555556 	.word	0x55555556
 8002730:	41200000 	.word	0x41200000
 8002734:	00000000 	.word	0x00000000

08002738 <matrix_inverse>:

matrix matrix_inverse(matrix* in2){
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b0a0      	sub	sp, #128	@ 0x80
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	float det = 0;
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	677b      	str	r3, [r7, #116]	@ 0x74
	det = matrix_determinant(in2);
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f7ff ff51 	bl	80025f0 <matrix_determinant>
 800274e:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	float num[9] = {0,0,0,0,0,0,0,0,0,0};
 8002752:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002756:	2224      	movs	r2, #36	@ 0x24
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f9f8 	bl	8005b50 <memset>
	matrix result = matrix_init(3, 3, &num);
 8002760:	f107 0008 	add.w	r0, r7, #8
 8002764:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002768:	2203      	movs	r2, #3
 800276a:	2103      	movs	r1, #3
 800276c:	f7ff fd3c 	bl	80021e8 <matrix_init>
	if (in2->d_row == 3 && in2->d_col == 3){
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b03      	cmp	r3, #3
 8002776:	f040 80d0 	bne.w	800291a <matrix_inverse+0x1e2>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	f040 80cb 	bne.w	800291a <matrix_inverse+0x1e2>
		for (int i = 0; i < 3; i++){
 8002784:	2300      	movs	r3, #0
 8002786:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002788:	e0c2      	b.n	8002910 <matrix_inverse+0x1d8>
			for (int j = 0; j < 3; j++){
 800278a:	2300      	movs	r3, #0
 800278c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800278e:	e0b8      	b.n	8002902 <matrix_inverse+0x1ca>
				result.data[j][i] = ((in2->data[(i + 1) % 3][(j + 1) % 3] * in2->data[(i + 2) % 3][(j + 2) % 3])
 8002790:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	4b8c      	ldr	r3, [pc, #560]	@ (80029c8 <matrix_inverse+0x290>)
 8002796:	fb83 3102 	smull	r3, r1, r3, r2
 800279a:	17d3      	asrs	r3, r2, #31
 800279c:	1ac9      	subs	r1, r1, r3
 800279e:	460b      	mov	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	1ad1      	subs	r1, r2, r3
 80027a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027a8:	1c58      	adds	r0, r3, #1
 80027aa:	4b87      	ldr	r3, [pc, #540]	@ (80029c8 <matrix_inverse+0x290>)
 80027ac:	fb83 3200 	smull	r3, r2, r3, r0
 80027b0:	17c3      	asrs	r3, r0, #31
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	1ac2      	subs	r2, r0, r3
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	008b      	lsls	r3, r1, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3302      	adds	r3, #2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4403      	add	r3, r0
 80027c8:	ed93 7a00 	vldr	s14, [r3]
 80027cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027ce:	1c9a      	adds	r2, r3, #2
 80027d0:	4b7d      	ldr	r3, [pc, #500]	@ (80029c8 <matrix_inverse+0x290>)
 80027d2:	fb83 3102 	smull	r3, r1, r3, r2
 80027d6:	17d3      	asrs	r3, r2, #31
 80027d8:	1ac9      	subs	r1, r1, r3
 80027da:	460b      	mov	r3, r1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	440b      	add	r3, r1
 80027e0:	1ad1      	subs	r1, r2, r3
 80027e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027e4:	1c98      	adds	r0, r3, #2
 80027e6:	4b78      	ldr	r3, [pc, #480]	@ (80029c8 <matrix_inverse+0x290>)
 80027e8:	fb83 3200 	smull	r3, r2, r3, r0
 80027ec:	17c3      	asrs	r3, r0, #31
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	1ac2      	subs	r2, r0, r3
 80027f8:	6838      	ldr	r0, [r7, #0]
 80027fa:	008b      	lsls	r3, r1, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	3302      	adds	r3, #2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4403      	add	r3, r0
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	ee27 7a27 	vmul.f32	s14, s14, s15
						- (in2->data[(i + 1) % 3][(j + 2) % 3] * in2->data[(i + 2) % 3][(j + 1) % 3])) * pow(-1,(i+j)) / det;
 800280c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	4b6d      	ldr	r3, [pc, #436]	@ (80029c8 <matrix_inverse+0x290>)
 8002812:	fb83 3102 	smull	r3, r1, r3, r2
 8002816:	17d3      	asrs	r3, r2, #31
 8002818:	1ac9      	subs	r1, r1, r3
 800281a:	460b      	mov	r3, r1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	440b      	add	r3, r1
 8002820:	1ad1      	subs	r1, r2, r3
 8002822:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002824:	1c98      	adds	r0, r3, #2
 8002826:	4b68      	ldr	r3, [pc, #416]	@ (80029c8 <matrix_inverse+0x290>)
 8002828:	fb83 3200 	smull	r3, r2, r3, r0
 800282c:	17c3      	asrs	r3, r0, #31
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	1ac2      	subs	r2, r0, r3
 8002838:	6838      	ldr	r0, [r7, #0]
 800283a:	008b      	lsls	r3, r1, #2
 800283c:	4413      	add	r3, r2
 800283e:	3302      	adds	r3, #2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4403      	add	r3, r0
 8002844:	edd3 6a00 	vldr	s13, [r3]
 8002848:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800284a:	1c9a      	adds	r2, r3, #2
 800284c:	4b5e      	ldr	r3, [pc, #376]	@ (80029c8 <matrix_inverse+0x290>)
 800284e:	fb83 3102 	smull	r3, r1, r3, r2
 8002852:	17d3      	asrs	r3, r2, #31
 8002854:	1ac9      	subs	r1, r1, r3
 8002856:	460b      	mov	r3, r1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	440b      	add	r3, r1
 800285c:	1ad1      	subs	r1, r2, r3
 800285e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002860:	1c58      	adds	r0, r3, #1
 8002862:	4b59      	ldr	r3, [pc, #356]	@ (80029c8 <matrix_inverse+0x290>)
 8002864:	fb83 3200 	smull	r3, r2, r3, r0
 8002868:	17c3      	asrs	r3, r0, #31
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	1ac2      	subs	r2, r0, r3
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	008b      	lsls	r3, r1, #2
 8002878:	4413      	add	r3, r2
 800287a:	3302      	adds	r3, #2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4403      	add	r3, r0
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288c:	ee17 0a90 	vmov	r0, s15
 8002890:	f7fd fe26 	bl	80004e0 <__aeabi_f2d>
 8002894:	4604      	mov	r4, r0
 8002896:	460d      	mov	r5, r1
 8002898:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800289a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800289c:	4413      	add	r3, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe0c 	bl	80004bc <__aeabi_i2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	ec43 2b11 	vmov	d1, r2, r3
 80028ac:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 80029c0 <matrix_inverse+0x288>
 80028b0:	f003 f98e 	bl	8005bd0 <pow>
 80028b4:	ec53 2b10 	vmov	r2, r3, d0
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd fe68 	bl	8000590 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	461d      	mov	r5, r3
 80028c8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80028ca:	f7fd fe09 	bl	80004e0 <__aeabi_f2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd ff85 	bl	80007e4 <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f905 	bl	8000af0 <__aeabi_d2f>
 80028e6:	4601      	mov	r1, r0
				result.data[j][i] = ((in2->data[(i + 1) % 3][(j + 1) % 3] * in2->data[(i + 2) % 3][(j + 2) % 3])
 80028e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ea:	009a      	lsls	r2, r3, #2
 80028ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ee:	4413      	add	r3, r2
 80028f0:	3302      	adds	r3, #2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	3380      	adds	r3, #128	@ 0x80
 80028f6:	443b      	add	r3, r7
 80028f8:	3b78      	subs	r3, #120	@ 0x78
 80028fa:	6019      	str	r1, [r3, #0]
			for (int j = 0; j < 3; j++){
 80028fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028fe:	3301      	adds	r3, #1
 8002900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002902:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002904:	2b02      	cmp	r3, #2
 8002906:	f77f af43 	ble.w	8002790 <matrix_inverse+0x58>
		for (int i = 0; i < 3; i++){
 800290a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800290c:	3301      	adds	r3, #1
 800290e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002910:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002912:	2b02      	cmp	r3, #2
 8002914:	f77f af39 	ble.w	800278a <matrix_inverse+0x52>
 8002918:	e039      	b.n	800298e <matrix_inverse+0x256>
			}
		}
	}
	else if (in2->d_row == 2 && in2->d_col == 2){
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d12c      	bne.n	800297c <matrix_inverse+0x244>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d128      	bne.n	800297c <matrix_inverse+0x244>
		result.data[0][0] = in2->data[1][1] * 1.0 / det;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002930:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002938:	edc7 7a04 	vstr	s15, [r7, #16]
		result.data[0][1] = -1 * in2->data[0][1] * 1.0 / det;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002942:	eef1 6a67 	vneg.f32	s13, s15
 8002946:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800294a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800294e:	edc7 7a05 	vstr	s15, [r7, #20]
		result.data[1][0] = -1 * in2->data[1][0] * 1.0 / det;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	edd3 7a06 	vldr	s15, [r3, #24]
 8002958:	eef1 6a67 	vneg.f32	s13, s15
 800295c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002964:	edc7 7a08 	vstr	s15, [r7, #32]
		result.data[1][1] = in2->data[0][0] * 1.0 / det;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	edd3 6a02 	vldr	s13, [r3, #8]
 800296e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002976:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800297a:	e008      	b.n	800298e <matrix_inverse+0x256>

	}
	else{
		result.data[0][0] = 1/in2->data[0][0];
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298a:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	result.d_col = det;
 800298e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002996:	ee17 3a90 	vmov	r3, s15
 800299a:	60fb      	str	r3, [r7, #12]
	result.d_row = in2->d_row;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]
	return result;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	2248      	movs	r2, #72	@ 0x48
 80029ac:	4619      	mov	r1, r3
 80029ae:	f003 f901 	bl	8005bb4 <memcpy>
}
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	3780      	adds	r7, #128	@ 0x80
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	f3af 8000 	nop.w
 80029c0:	00000000 	.word	0x00000000
 80029c4:	bff00000 	.word	0xbff00000
 80029c8:	55555556 	.word	0x55555556

080029cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <HAL_MspInit+0x44>)
 80029d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a10 <HAL_MspInit+0x44>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <HAL_MspInit+0x44>)
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_MspInit+0x44>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ee:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <HAL_MspInit+0x44>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_MspInit+0x44>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a02:	f000 fd15 	bl	8003430 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b09e      	sub	sp, #120	@ 0x78
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	2254      	movs	r2, #84	@ 0x54
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 f88b 	bl	8005b50 <memset>
  if(huart->Instance==LPUART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002abc <HAL_UART_MspInit+0xa8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d136      	bne.n	8002ab2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a44:	2320      	movs	r3, #32
 8002a46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a4c:	f107 0310 	add.w	r3, r7, #16
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 fa2b 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a5c:	f7ff fbbe 	bl	80021dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a60:	4b17      	ldr	r3, [pc, #92]	@ (8002ac0 <HAL_UART_MspInit+0xac>)
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	4a16      	ldr	r2, [pc, #88]	@ (8002ac0 <HAL_UART_MspInit+0xac>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <HAL_UART_MspInit+0xac>)
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_UART_MspInit+0xac>)
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7c:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <HAL_UART_MspInit+0xac>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <HAL_UART_MspInit+0xac>)
 8002a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002a90:	230c      	movs	r3, #12
 8002a92:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a94:	2302      	movs	r3, #2
 8002a96:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aae:	f000 fa5d 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3778      	adds	r7, #120	@ 0x78
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40008000 	.word	0x40008000
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae4:	d128      	bne.n	8002b38 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae6:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af2:	4b13      	ldr	r3, [pc, #76]	@ (8002b40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	4a0f      	ldr	r2, [pc, #60]	@ (8002b40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b16:	2303      	movs	r3, #3
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b26:	2301      	movs	r3, #1
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b34:	f000 fa1a 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b38:	bf00      	nop
 8002b3a:	3728      	adds	r7, #40	@ 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <HAL_TIM_Base_MspInit+0x38>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10b      	bne.n	8002b6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <HAL_TIM_Base_MspInit+0x3c>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5a:	4a09      	ldr	r2, [pc, #36]	@ (8002b80 <HAL_TIM_Base_MspInit+0x3c>)
 8002b5c:	f043 0308 	orr.w	r3, r3, #8
 8002b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b62:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <HAL_TIM_Base_MspInit+0x3c>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40021000 	.word	0x40021000

08002b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <NMI_Handler+0x4>

08002b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <BusFault_Handler+0x4>

08002ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <UsageFault_Handler+0x4>

08002bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bda:	f000 f899 	bl	8002d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002be6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bea:	f000 fb59 	bl	80032a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <SystemInit+0x20>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfe:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <SystemInit+0x20>)
 8002c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c18:	480d      	ldr	r0, [pc, #52]	@ (8002c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c1c:	f7ff ffea 	bl	8002bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c20:	480c      	ldr	r0, [pc, #48]	@ (8002c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c22:	490d      	ldr	r1, [pc, #52]	@ (8002c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c24:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <LoopForever+0xe>)
  movs r3, #0
 8002c26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c28:	e002      	b.n	8002c30 <LoopCopyDataInit>

08002c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c2e:	3304      	adds	r3, #4

08002c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c34:	d3f9      	bcc.n	8002c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c36:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c38:	4c0a      	ldr	r4, [pc, #40]	@ (8002c64 <LoopForever+0x16>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c3c:	e001      	b.n	8002c42 <LoopFillZerobss>

08002c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c40:	3204      	adds	r2, #4

08002c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c44:	d3fb      	bcc.n	8002c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c46:	f002 ff91 	bl	8005b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c4a:	f7ff f899 	bl	8001d80 <main>

08002c4e <LoopForever>:

LoopForever:
    b LoopForever
 8002c4e:	e7fe      	b.n	8002c4e <LoopForever>
  ldr   r0, =_estack
 8002c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002c5c:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 8002c60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c64:	20000314 	.word	0x20000314

08002c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c68:	e7fe      	b.n	8002c68 <ADC1_2_IRQHandler>

08002c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 f939 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f80e 	bl	8002c9c <HAL_InitTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	e001      	b.n	8002c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c8c:	f7ff fe9e 	bl	80029cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c90:	79fb      	ldrb	r3, [r7, #7]

}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ca8:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_InitTick+0x68>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_InitTick+0x6c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_InitTick+0x68>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f944 	bl	8002f52 <HAL_SYSTICK_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10f      	bne.n	8002cf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d809      	bhi.n	8002cea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	f04f 30ff 	mov.w	r0, #4294967295
 8002cde:	f000 f910 	bl	8002f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <HAL_InitTick+0x70>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e007      	b.n	8002cfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e004      	b.n	8002cfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e001      	b.n	8002cfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000010 	.word	0x20000010
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	2000000c 	.word	0x2000000c

08002d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d14:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_IncTick+0x1c>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_IncTick+0x20>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a03      	ldr	r2, [pc, #12]	@ (8002d2c <HAL_IncTick+0x1c>)
 8002d20:	6013      	str	r3, [r2, #0]
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	200001d8 	.word	0x200001d8
 8002d30:	20000010 	.word	0x20000010

08002d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return uwTick;
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <HAL_GetTick+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	200001d8 	.word	0x200001d8

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	@ (8002de8 <__NVIC_EnableIRQ+0x38>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	@ (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	@ (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	@ 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	@ 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff29 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff40 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff90 	bl	8002e40 <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5f 	bl	8002dec <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff33 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa4 	bl	8002ea8 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f7a:	e15a      	b.n	8003232 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 814c 	beq.w	800322c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0201 	and.w	r2, r3, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b03      	cmp	r3, #3
 8003018:	d017      	beq.n	800304a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d123      	bne.n	800309e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	6939      	ldr	r1, [r7, #16]
 800309a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0203 	and.w	r2, r3, #3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80a6 	beq.w	800322c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003250 <HAL_GPIO_Init+0x2e4>)
 80030e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003250 <HAL_GPIO_Init+0x2e4>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ec:	4b58      	ldr	r3, [pc, #352]	@ (8003250 <HAL_GPIO_Init+0x2e4>)
 80030ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f8:	4a56      	ldr	r2, [pc, #344]	@ (8003254 <HAL_GPIO_Init+0x2e8>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003122:	d01f      	beq.n	8003164 <HAL_GPIO_Init+0x1f8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a4c      	ldr	r2, [pc, #304]	@ (8003258 <HAL_GPIO_Init+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d019      	beq.n	8003160 <HAL_GPIO_Init+0x1f4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a4b      	ldr	r2, [pc, #300]	@ (800325c <HAL_GPIO_Init+0x2f0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_GPIO_Init+0x1f0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a4a      	ldr	r2, [pc, #296]	@ (8003260 <HAL_GPIO_Init+0x2f4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00d      	beq.n	8003158 <HAL_GPIO_Init+0x1ec>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a49      	ldr	r2, [pc, #292]	@ (8003264 <HAL_GPIO_Init+0x2f8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <HAL_GPIO_Init+0x1e8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a48      	ldr	r2, [pc, #288]	@ (8003268 <HAL_GPIO_Init+0x2fc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_GPIO_Init+0x1e4>
 800314c:	2305      	movs	r3, #5
 800314e:	e00a      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003150:	2306      	movs	r3, #6
 8003152:	e008      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003154:	2304      	movs	r3, #4
 8003156:	e006      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003158:	2303      	movs	r3, #3
 800315a:	e004      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 800315c:	2302      	movs	r3, #2
 800315e:	e002      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_GPIO_Init+0x1fa>
 8003164:	2300      	movs	r3, #0
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	f002 0203 	and.w	r2, r2, #3
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	4093      	lsls	r3, r2
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003176:	4937      	ldr	r1, [pc, #220]	@ (8003254 <HAL_GPIO_Init+0x2e8>)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003184:	4b39      	ldr	r3, [pc, #228]	@ (800326c <HAL_GPIO_Init+0x300>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031a8:	4a30      	ldr	r2, [pc, #192]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ae:	4b2f      	ldr	r3, [pc, #188]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031d2:	4a26      	ldr	r2, [pc, #152]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031d8:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031fc:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <HAL_GPIO_Init+0x300>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <HAL_GPIO_Init+0x300>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003226:	4a11      	ldr	r2, [pc, #68]	@ (800326c <HAL_GPIO_Init+0x300>)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	f47f ae9d 	bne.w	8002f7c <HAL_GPIO_Init+0x10>
  }
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	40010000 	.word	0x40010000
 8003258:	48000400 	.word	0x48000400
 800325c:	48000800 	.word	0x48000800
 8003260:	48000c00 	.word	0x48000c00
 8003264:	48001000 	.word	0x48001000
 8003268:	48001400 	.word	0x48001400
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
 800327c:	4613      	mov	r3, r2
 800327e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800328c:	e002      	b.n	8003294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032aa:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d006      	beq.n	80032c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032b6:	4a05      	ldr	r2, [pc, #20]	@ (80032cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f806 	bl	80032d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d141      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003302:	d131      	bne.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003304:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800330a:	4a46      	ldr	r2, [pc, #280]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003314:	4b43      	ldr	r3, [pc, #268]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800331c:	4a41      	ldr	r2, [pc, #260]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003324:	4b40      	ldr	r3, [pc, #256]	@ (8003428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2232      	movs	r2, #50	@ 0x32
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	4a3f      	ldr	r2, [pc, #252]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9b      	lsrs	r3, r3, #18
 8003336:	3301      	adds	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333a:	e002      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3b01      	subs	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003342:	4b38      	ldr	r3, [pc, #224]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334e:	d102      	bne.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f2      	bne.n	800333c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003356:	4b33      	ldr	r3, [pc, #204]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003362:	d158      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e057      	b.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003368:	4b2e      	ldr	r3, [pc, #184]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336e:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003378:	e04d      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003380:	d141      	bne.n	8003406 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003382:	4b28      	ldr	r3, [pc, #160]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338e:	d131      	bne.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003390:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003396:	4a23      	ldr	r2, [pc, #140]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a0:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2232      	movs	r2, #50	@ 0x32
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	0c9b      	lsrs	r3, r3, #18
 80033c2:	3301      	adds	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c6:	e002      	b.n	80033ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ce:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033da:	d102      	bne.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f2      	bne.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ee:	d112      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e011      	b.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003404:	e007      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003406:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800340e:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003414:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40007000 	.word	0x40007000
 8003428:	20000008 	.word	0x20000008
 800342c:	431bde83 	.word	0x431bde83

08003430 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a04      	ldr	r2, [pc, #16]	@ (800344c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800343a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800343e:	6093      	str	r3, [r2, #8]
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40007000 	.word	0x40007000

08003450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e2fe      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d075      	beq.n	800355a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b97      	ldr	r3, [pc, #604]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003478:	4b94      	ldr	r3, [pc, #592]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d102      	bne.n	800348e <HAL_RCC_OscConfig+0x3e>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d002      	beq.n	8003494 <HAL_RCC_OscConfig+0x44>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d10b      	bne.n	80034ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	4b8d      	ldr	r3, [pc, #564]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d05b      	beq.n	8003558 <HAL_RCC_OscConfig+0x108>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d157      	bne.n	8003558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e2d9      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b4:	d106      	bne.n	80034c4 <HAL_RCC_OscConfig+0x74>
 80034b6:	4b85      	ldr	r3, [pc, #532]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a84      	ldr	r2, [pc, #528]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e01d      	b.n	8003500 <HAL_RCC_OscConfig+0xb0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x98>
 80034ce:	4b7f      	ldr	r3, [pc, #508]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7e      	ldr	r2, [pc, #504]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b7c      	ldr	r3, [pc, #496]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7b      	ldr	r2, [pc, #492]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0xb0>
 80034e8:	4b78      	ldr	r3, [pc, #480]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a77      	ldr	r2, [pc, #476]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b75      	ldr	r3, [pc, #468]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a74      	ldr	r2, [pc, #464]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80034fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7ff fc14 	bl	8002d34 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7ff fc10 	bl	8002d34 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	@ 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e29e      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003522:	4b6a      	ldr	r3, [pc, #424]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0xc0>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7ff fc00 	bl	8002d34 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003538:	f7ff fbfc 	bl	8002d34 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	@ 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e28a      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800354a:	4b60      	ldr	r3, [pc, #384]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0xe8>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d075      	beq.n	8003652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003566:	4b59      	ldr	r3, [pc, #356]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003570:	4b56      	ldr	r3, [pc, #344]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d102      	bne.n	8003586 <HAL_RCC_OscConfig+0x136>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d002      	beq.n	800358c <HAL_RCC_OscConfig+0x13c>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11f      	bne.n	80035cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358c:	4b4f      	ldr	r3, [pc, #316]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x154>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e25d      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b49      	ldr	r3, [pc, #292]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	4946      	ldr	r1, [pc, #280]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035b8:	4b45      	ldr	r3, [pc, #276]	@ (80036d0 <HAL_RCC_OscConfig+0x280>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fb6d 	bl	8002c9c <HAL_InitTick>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d043      	beq.n	8003650 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e249      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d023      	beq.n	800361c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d4:	4b3d      	ldr	r3, [pc, #244]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a3c      	ldr	r2, [pc, #240]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7ff fba8 	bl	8002d34 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e8:	f7ff fba4 	bl	8002d34 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e232      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fa:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4b31      	ldr	r3, [pc, #196]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	492d      	ldr	r1, [pc, #180]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
 800361a:	e01a      	b.n	8003652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361c:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2a      	ldr	r2, [pc, #168]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003622:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7ff fb84 	bl	8002d34 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003630:	f7ff fb80 	bl	8002d34 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e20e      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003642:	4b22      	ldr	r3, [pc, #136]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x1e0>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d041      	beq.n	80036e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01c      	beq.n	80036a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366c:	4a17      	ldr	r2, [pc, #92]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7ff fb5d 	bl	8002d34 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367e:	f7ff fb59 	bl	8002d34 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e1e7      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003690:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ef      	beq.n	800367e <HAL_RCC_OscConfig+0x22e>
 800369e:	e020      	b.n	80036e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <HAL_RCC_OscConfig+0x27c>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7ff fb40 	bl	8002d34 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b6:	e00d      	b.n	80036d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7ff fb3c 	bl	8002d34 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d906      	bls.n	80036d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1ca      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ea      	bne.n	80036b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80a6 	beq.w	800383c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f0:	2300      	movs	r3, #0
 80036f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036f4:	4b84      	ldr	r3, [pc, #528]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_OscConfig+0x2b4>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x2b6>
 8003704:	2300      	movs	r3, #0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	4b7f      	ldr	r3, [pc, #508]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	4a7e      	ldr	r2, [pc, #504]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003714:	6593      	str	r3, [r2, #88]	@ 0x58
 8003716:	4b7c      	ldr	r3, [pc, #496]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003722:	2301      	movs	r3, #1
 8003724:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003726:	4b79      	ldr	r3, [pc, #484]	@ (800390c <HAL_RCC_OscConfig+0x4bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d118      	bne.n	8003764 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003732:	4b76      	ldr	r3, [pc, #472]	@ (800390c <HAL_RCC_OscConfig+0x4bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a75      	ldr	r2, [pc, #468]	@ (800390c <HAL_RCC_OscConfig+0x4bc>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7ff faf9 	bl	8002d34 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003746:	f7ff faf5 	bl	8002d34 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e183      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003758:	4b6c      	ldr	r3, [pc, #432]	@ (800390c <HAL_RCC_OscConfig+0x4bc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d108      	bne.n	800377e <HAL_RCC_OscConfig+0x32e>
 800376c:	4b66      	ldr	r3, [pc, #408]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	4a65      	ldr	r2, [pc, #404]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800377c:	e024      	b.n	80037c8 <HAL_RCC_OscConfig+0x378>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b05      	cmp	r3, #5
 8003784:	d110      	bne.n	80037a8 <HAL_RCC_OscConfig+0x358>
 8003786:	4b60      	ldr	r3, [pc, #384]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378c:	4a5e      	ldr	r2, [pc, #376]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003796:	4b5c      	ldr	r3, [pc, #368]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379c:	4a5a      	ldr	r2, [pc, #360]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037a6:	e00f      	b.n	80037c8 <HAL_RCC_OscConfig+0x378>
 80037a8:	4b57      	ldr	r3, [pc, #348]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	4a56      	ldr	r2, [pc, #344]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b8:	4b53      	ldr	r3, [pc, #332]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a52      	ldr	r2, [pc, #328]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d016      	beq.n	80037fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7ff fab0 	bl	8002d34 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	f7ff faac 	bl	8002d34 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e138      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ee:	4b46      	ldr	r3, [pc, #280]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ed      	beq.n	80037d8 <HAL_RCC_OscConfig+0x388>
 80037fc:	e015      	b.n	800382a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7ff fa99 	bl	8002d34 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7ff fa95 	bl	8002d34 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e121      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800381c:	4b3a      	ldr	r3, [pc, #232]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ed      	bne.n	8003806 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800382a:	7ffb      	ldrb	r3, [r7, #31]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003830:	4b35      	ldr	r3, [pc, #212]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	4a34      	ldr	r2, [pc, #208]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800383a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d03c      	beq.n	80038c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01c      	beq.n	800388a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003850:	4b2d      	ldr	r3, [pc, #180]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003852:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003856:	4a2c      	ldr	r2, [pc, #176]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7ff fa68 	bl	8002d34 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003868:	f7ff fa64 	bl	8002d34 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0f2      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800387a:	4b23      	ldr	r3, [pc, #140]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 800387c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ef      	beq.n	8003868 <HAL_RCC_OscConfig+0x418>
 8003888:	e01b      	b.n	80038c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800388a:	4b1f      	ldr	r3, [pc, #124]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 800388c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7ff fa4b 	bl	8002d34 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a2:	f7ff fa47 	bl	8002d34 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0d5      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038b4:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ef      	bne.n	80038a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80c9 	beq.w	8003a5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	f000 8083 	beq.w	80039e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d15e      	bne.n	80039a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a08      	ldr	r2, [pc, #32]	@ (8003908 <HAL_RCC_OscConfig+0x4b8>)
 80038e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7ff fa21 	bl	8002d34 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f4:	e00c      	b.n	8003910 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f6:	f7ff fa1d 	bl	8002d34 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d905      	bls.n	8003910 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e0ab      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003910:	4b55      	ldr	r3, [pc, #340]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ec      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800391c:	4b52      	ldr	r3, [pc, #328]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	4b52      	ldr	r3, [pc, #328]	@ (8003a6c <HAL_RCC_OscConfig+0x61c>)
 8003922:	4013      	ands	r3, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6a11      	ldr	r1, [r2, #32]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800392c:	3a01      	subs	r2, #1
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	4311      	orrs	r1, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003936:	0212      	lsls	r2, r2, #8
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0552      	lsls	r2, r2, #21
 8003944:	4311      	orrs	r1, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800394a:	0852      	lsrs	r2, r2, #1
 800394c:	3a01      	subs	r2, #1
 800394e:	0652      	lsls	r2, r2, #25
 8003950:	4311      	orrs	r1, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003956:	06d2      	lsls	r2, r2, #27
 8003958:	430a      	orrs	r2, r1
 800395a:	4943      	ldr	r1, [pc, #268]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 800395c:	4313      	orrs	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003960:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a40      	ldr	r2, [pc, #256]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 8003966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800396a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800396c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a3d      	ldr	r2, [pc, #244]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 8003972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003976:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7ff f9dc 	bl	8002d34 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003980:	f7ff f9d8 	bl	8002d34 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e066      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003992:	4b35      	ldr	r3, [pc, #212]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x530>
 800399e:	e05e      	b.n	8003a5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a30      	ldr	r2, [pc, #192]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 80039a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7ff f9c2 	bl	8002d34 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7ff f9be 	bl	8002d34 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e04c      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c6:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039d2:	4b25      	ldr	r3, [pc, #148]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	4924      	ldr	r1, [pc, #144]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 80039d8:	4b25      	ldr	r3, [pc, #148]	@ (8003a70 <HAL_RCC_OscConfig+0x620>)
 80039da:	4013      	ands	r3, r2
 80039dc:	60cb      	str	r3, [r1, #12]
 80039de:	e03e      	b.n	8003a5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e039      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003a68 <HAL_RCC_OscConfig+0x618>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0203 	and.w	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d12c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d123      	bne.n	8003a5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d11b      	bne.n	8003a5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d113      	bne.n	8003a5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d109      	bne.n	8003a5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	3b01      	subs	r3, #1
 8003a54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	019f800c 	.word	0x019f800c
 8003a70:	feeefffc 	.word	0xfeeefffc

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e11e      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b91      	ldr	r3, [pc, #580]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d910      	bls.n	8003abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b8e      	ldr	r3, [pc, #568]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 020f 	bic.w	r2, r3, #15
 8003aa2:	498c      	ldr	r1, [pc, #560]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b8a      	ldr	r3, [pc, #552]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e106      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d073      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d129      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad0:	4b81      	ldr	r3, [pc, #516]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0f4      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ae0:	f000 f99e 	bl	8003e20 <RCC_GetSysClockFreqFromPLLSource>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4a7c      	ldr	r2, [pc, #496]	@ (8003cdc <HAL_RCC_ClockConfig+0x268>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d93f      	bls.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aee:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d033      	beq.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d12f      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b0e:	4b72      	ldr	r3, [pc, #456]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b16:	4a70      	ldr	r2, [pc, #448]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b1e:	2380      	movs	r3, #128	@ 0x80
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e024      	b.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0c6      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3c:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0be      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b4c:	f000 f8ce 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4a61      	ldr	r2, [pc, #388]	@ (8003cdc <HAL_RCC_ClockConfig+0x268>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d909      	bls.n	8003b6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b62:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4957      	ldr	r1, [pc, #348]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b80:	f7ff f8d8 	bl	8002d34 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7ff f8d4 	bl	8002d34 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e095      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc8:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a42      	ldr	r2, [pc, #264]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003be0:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003be8:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4936      	ldr	r1, [pc, #216]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b80      	cmp	r3, #128	@ 0x80
 8003c08:	d105      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c0a:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c16:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d21d      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c24:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 020f 	bic.w	r2, r3, #15
 8003c2c:	4929      	ldr	r1, [pc, #164]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c34:	f7ff f87e 	bl	8002d34 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7ff f87a 	bl	8002d34 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e03b      	b.n	8003cca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1ed      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4917      	ldr	r1, [pc, #92]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8a:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	490f      	ldr	r1, [pc, #60]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c9e:	f000 f825 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <HAL_RCC_ClockConfig+0x264>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	490c      	ldr	r1, [pc, #48]	@ (8003ce0 <HAL_RCC_ClockConfig+0x26c>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <HAL_RCC_ClockConfig+0x270>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <HAL_RCC_ClockConfig+0x274>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe ffea 	bl	8002c9c <HAL_InitTick>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	04c4b400 	.word	0x04c4b400
 8003ce0:	08006ae8 	.word	0x08006ae8
 8003ce4:	20000008 	.word	0x20000008
 8003ce8:	2000000c 	.word	0x2000000c

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d102      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	e047      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d04:	4b27      	ldr	r3, [pc, #156]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d102      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d10:	4b26      	ldr	r3, [pc, #152]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	e03e      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d16:	4b23      	ldr	r3, [pc, #140]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d136      	bne.n	8003d90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d22:	4b20      	ldr	r3, [pc, #128]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3301      	adds	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d40:	4a1a      	ldr	r2, [pc, #104]	@ (8003dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	4a16      	ldr	r2, [pc, #88]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4a:	68d2      	ldr	r2, [r2, #12]
 8003d4c:	0a12      	lsrs	r2, r2, #8
 8003d4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
      break;
 8003d58:	e00c      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5a:	4a13      	ldr	r2, [pc, #76]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4a10      	ldr	r2, [pc, #64]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	0a12      	lsrs	r2, r2, #8
 8003d68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
      break;
 8003d72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0e5b      	lsrs	r3, r3, #25
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	e001      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d94:	693b      	ldr	r3, [r7, #16]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	016e3600 	.word	0x016e3600

08003db0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db4:	4b03      	ldr	r3, [pc, #12]	@ (8003dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db6:	681b      	ldr	r3, [r3, #0]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000008 	.word	0x20000008

08003dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dcc:	f7ff fff0 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4904      	ldr	r1, [pc, #16]	@ (8003df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	08006af8 	.word	0x08006af8

08003df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003df8:	f7ff ffda 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0adb      	lsrs	r3, r3, #11
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4904      	ldr	r1, [pc, #16]	@ (8003e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08006af8 	.word	0x08006af8

08003e20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d10c      	bne.n	8003e5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e44:	4a17      	ldr	r2, [pc, #92]	@ (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e4e:	68d2      	ldr	r2, [r2, #12]
 8003e50:	0a12      	lsrs	r2, r2, #8
 8003e52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	617b      	str	r3, [r7, #20]
    break;
 8003e5c:	e00c      	b.n	8003e78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	0a12      	lsrs	r2, r2, #8
 8003e6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
    break;
 8003e76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e78:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0e5b      	lsrs	r3, r3, #25
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	3301      	adds	r3, #1
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e92:	687b      	ldr	r3, [r7, #4]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	016e3600 	.word	0x016e3600
 8003ea8:	00f42400 	.word	0x00f42400

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8098 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ece:	4b43      	ldr	r3, [pc, #268]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	4b40      	ldr	r3, [pc, #256]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ede:	4a3f      	ldr	r2, [pc, #252]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a39      	ldr	r2, [pc, #228]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f02:	f7fe ff17 	bl	8002d34 <HAL_GetTick>
 8003f06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f08:	e009      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0a:	f7fe ff13 	bl	8002d34 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d902      	bls.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f1c:	e005      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f1e:	4b30      	ldr	r3, [pc, #192]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ef      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d159      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f30:	4b2a      	ldr	r3, [pc, #168]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d019      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f4c:	4b23      	ldr	r3, [pc, #140]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f58:	4b20      	ldr	r3, [pc, #128]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f68:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f78:	4a18      	ldr	r2, [pc, #96]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fe fed3 	bl	8002d34 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f90:	e00b      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fe fecf 	bl	8002d34 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d902      	bls.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003faa:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ec      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fcc:	4903      	ldr	r1, [pc, #12]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	74bb      	strb	r3, [r7, #18]
 8003fda:	e005      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7c7b      	ldrb	r3, [r7, #17]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4ba7      	ldr	r3, [pc, #668]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff2:	4aa6      	ldr	r2, [pc, #664]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	4ba1      	ldr	r3, [pc, #644]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	499d      	ldr	r1, [pc, #628]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004028:	4b98      	ldr	r3, [pc, #608]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	f023 020c 	bic.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4995      	ldr	r1, [pc, #596]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404a:	4b90      	ldr	r3, [pc, #576]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	498c      	ldr	r1, [pc, #560]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800406c:	4b87      	ldr	r3, [pc, #540]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004072:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	4984      	ldr	r1, [pc, #528]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800408e:	4b7f      	ldr	r3, [pc, #508]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	497b      	ldr	r1, [pc, #492]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b0:	4b76      	ldr	r3, [pc, #472]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	4973      	ldr	r1, [pc, #460]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d2:	4b6e      	ldr	r3, [pc, #440]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	496a      	ldr	r1, [pc, #424]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040f4:	4b65      	ldr	r3, [pc, #404]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4962      	ldr	r1, [pc, #392]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004116:	4b5d      	ldr	r3, [pc, #372]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	4959      	ldr	r1, [pc, #356]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004138:	4b54      	ldr	r3, [pc, #336]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	4951      	ldr	r1, [pc, #324]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415a:	4b4c      	ldr	r3, [pc, #304]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	4948      	ldr	r1, [pc, #288]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800417c:	4b43      	ldr	r3, [pc, #268]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	4940      	ldr	r1, [pc, #256]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800419c:	4b3b      	ldr	r3, [pc, #236]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a3a      	ldr	r2, [pc, #232]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d015      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041b4:	4b35      	ldr	r3, [pc, #212]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	4932      	ldr	r1, [pc, #200]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041d2:	d105      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d4:	4b2d      	ldr	r3, [pc, #180]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a2c      	ldr	r2, [pc, #176]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d015      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041ec:	4b27      	ldr	r3, [pc, #156]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	4924      	ldr	r1, [pc, #144]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800420a:	d105      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420c:	4b1f      	ldr	r3, [pc, #124]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a1e      	ldr	r2, [pc, #120]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004216:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d015      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004224:	4b19      	ldr	r3, [pc, #100]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004232:	4916      	ldr	r1, [pc, #88]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004244:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a10      	ldr	r2, [pc, #64]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800424e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d019      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	4908      	ldr	r1, [pc, #32]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800427a:	d109      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b03      	ldr	r3, [pc, #12]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a02      	ldr	r2, [pc, #8]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
 8004288:	e002      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800429c:	4b29      	ldr	r3, [pc, #164]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	4926      	ldr	r1, [pc, #152]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ba:	d105      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042bc:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a20      	ldr	r2, [pc, #128]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e2:	4918      	ldr	r1, [pc, #96]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f2:	d105      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042f4:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a12      	ldr	r2, [pc, #72]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d015      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800430c:	4b0d      	ldr	r3, [pc, #52]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004312:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	490a      	ldr	r1, [pc, #40]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004338:	7cbb      	ldrb	r3, [r7, #18]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e049      	b.n	80043ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe fbe8 	bl	8002b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f000 fb68 	bl	8004a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d001      	beq.n	8004410 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e04c      	b.n	80044aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	@ (80044b8 <HAL_TIM_Base_Start+0xc0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_TIM_Base_Start+0x70>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442a:	d01d      	beq.n	8004468 <HAL_TIM_Base_Start+0x70>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <HAL_TIM_Base_Start+0xc4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_TIM_Base_Start+0x70>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_TIM_Base_Start+0xc8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_TIM_Base_Start+0x70>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_TIM_Base_Start+0xcc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_TIM_Base_Start+0x70>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	@ (80044c8 <HAL_TIM_Base_Start+0xd0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_TIM_Base_Start+0x70>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1c      	ldr	r2, [pc, #112]	@ (80044cc <HAL_TIM_Base_Start+0xd4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_Base_Start+0x70>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1b      	ldr	r2, [pc, #108]	@ (80044d0 <HAL_TIM_Base_Start+0xd8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d115      	bne.n	8004494 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_TIM_Base_Start+0xdc>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d015      	beq.n	80044a6 <HAL_TIM_Base_Start+0xae>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004480:	d011      	beq.n	80044a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	e008      	b.n	80044a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40013400 	.word	0x40013400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40015000 	.word	0x40015000
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d001      	beq.n	80044f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e054      	b.n	800459a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a26      	ldr	r2, [pc, #152]	@ (80045a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451a:	d01d      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a22      	ldr	r2, [pc, #136]	@ (80045ac <HAL_TIM_Base_Start_IT+0xd4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a21      	ldr	r2, [pc, #132]	@ (80045b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <HAL_TIM_Base_Start_IT+0xe4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_TIM_Base_Start_IT+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d115      	bne.n	8004584 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xec>)
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b06      	cmp	r3, #6
 8004568:	d015      	beq.n	8004596 <HAL_TIM_Base_Start_IT+0xbe>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d011      	beq.n	8004596 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004582:	e008      	b.n	8004596 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e000      	b.n	8004598 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40013400 	.word	0x40013400
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40015000 	.word	0x40015000
 80045c4:	00010007 	.word	0x00010007

080045c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e097      	b.n	800470c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fe fa67 	bl	8002ac4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800460c:	f023 0307 	bic.w	r3, r3, #7
 8004610:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 fa1d 	bl	8004a5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	4313      	orrs	r3, r2
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004668:	f023 030c 	bic.w	r3, r3, #12
 800466c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004674:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	4313      	orrs	r3, r2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	011a      	lsls	r2, r3, #4
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	031b      	lsls	r3, r3, #12
 8004698:	4313      	orrs	r3, r2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4313      	orrs	r3, r2
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004724:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800472c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004734:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800473c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d110      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d102      	bne.n	8004750 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800474a:	7b7b      	ldrb	r3, [r7, #13]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e069      	b.n	8004828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004764:	e031      	b.n	80047ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d110      	bne.n	800478e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800476c:	7bbb      	ldrb	r3, [r7, #14]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004772:	7b3b      	ldrb	r3, [r7, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e055      	b.n	8004828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800478c:	e01d      	b.n	80047ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004794:	7bbb      	ldrb	r3, [r7, #14]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800479a:	7b7b      	ldrb	r3, [r7, #13]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047a0:	7b3b      	ldrb	r3, [r7, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e03e      	b.n	8004828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_TIM_Encoder_Start+0xc4>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d008      	beq.n	80047e8 <HAL_TIM_Encoder_Start+0xd4>
 80047d6:	e00f      	b.n	80047f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2201      	movs	r2, #1
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa8b 	bl	8004cfc <TIM_CCxChannelCmd>
      break;
 80047e6:	e016      	b.n	8004816 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2201      	movs	r2, #1
 80047ee:	2104      	movs	r1, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fa83 	bl	8004cfc <TIM_CCxChannelCmd>
      break;
 80047f6:	e00e      	b.n	8004816 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2201      	movs	r2, #1
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fa7b 	bl	8004cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	2104      	movs	r1, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fa74 	bl	8004cfc <TIM_CCxChannelCmd>
      break;
 8004814:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIM_ConfigClockSource+0x1c>
 8004848:	2302      	movs	r3, #2
 800484a:	e0f6      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x20a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800486a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a6f      	ldr	r2, [pc, #444]	@ (8004a44 <HAL_TIM_ConfigClockSource+0x214>)
 8004886:	4293      	cmp	r3, r2
 8004888:	f000 80c1 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 800488c:	4a6d      	ldr	r2, [pc, #436]	@ (8004a44 <HAL_TIM_ConfigClockSource+0x214>)
 800488e:	4293      	cmp	r3, r2
 8004890:	f200 80c6 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004894:	4a6c      	ldr	r2, [pc, #432]	@ (8004a48 <HAL_TIM_ConfigClockSource+0x218>)
 8004896:	4293      	cmp	r3, r2
 8004898:	f000 80b9 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 800489c:	4a6a      	ldr	r2, [pc, #424]	@ (8004a48 <HAL_TIM_ConfigClockSource+0x218>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	f200 80be 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 80048a4:	4a69      	ldr	r2, [pc, #420]	@ (8004a4c <HAL_TIM_ConfigClockSource+0x21c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	f000 80b1 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 80048ac:	4a67      	ldr	r2, [pc, #412]	@ (8004a4c <HAL_TIM_ConfigClockSource+0x21c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	f200 80b6 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 80048b4:	4a66      	ldr	r2, [pc, #408]	@ (8004a50 <HAL_TIM_ConfigClockSource+0x220>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	f000 80a9 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 80048bc:	4a64      	ldr	r2, [pc, #400]	@ (8004a50 <HAL_TIM_ConfigClockSource+0x220>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	f200 80ae 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 80048c4:	4a63      	ldr	r2, [pc, #396]	@ (8004a54 <HAL_TIM_ConfigClockSource+0x224>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	f000 80a1 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 80048cc:	4a61      	ldr	r2, [pc, #388]	@ (8004a54 <HAL_TIM_ConfigClockSource+0x224>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	f200 80a6 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 80048d4:	4a60      	ldr	r2, [pc, #384]	@ (8004a58 <HAL_TIM_ConfigClockSource+0x228>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f000 8099 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 80048dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004a58 <HAL_TIM_ConfigClockSource+0x228>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f200 809e 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 80048e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048e8:	f000 8091 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 80048ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048f0:	f200 8096 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 80048f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048f8:	f000 8089 	beq.w	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 80048fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004900:	f200 808e 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004908:	d03e      	beq.n	8004988 <HAL_TIM_ConfigClockSource+0x158>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490e:	f200 8087 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	f000 8086 	beq.w	8004a26 <HAL_TIM_ConfigClockSource+0x1f6>
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800491e:	d87f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004920:	2b70      	cmp	r3, #112	@ 0x70
 8004922:	d01a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x12a>
 8004924:	2b70      	cmp	r3, #112	@ 0x70
 8004926:	d87b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004928:	2b60      	cmp	r3, #96	@ 0x60
 800492a:	d050      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x19e>
 800492c:	2b60      	cmp	r3, #96	@ 0x60
 800492e:	d877      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004930:	2b50      	cmp	r3, #80	@ 0x50
 8004932:	d03c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x17e>
 8004934:	2b50      	cmp	r3, #80	@ 0x50
 8004936:	d873      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d058      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x1be>
 800493c:	2b40      	cmp	r3, #64	@ 0x40
 800493e:	d86f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004940:	2b30      	cmp	r3, #48	@ 0x30
 8004942:	d064      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 8004944:	2b30      	cmp	r3, #48	@ 0x30
 8004946:	d86b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d060      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 800494c:	2b20      	cmp	r3, #32
 800494e:	d867      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d05c      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 8004954:	2b10      	cmp	r3, #16
 8004956:	d05a      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x1de>
 8004958:	e062      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800496a:	f000 f9a7 	bl	8004cbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800497c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	609a      	str	r2, [r3, #8]
      break;
 8004986:	e04f      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004998:	f000 f990 	bl	8004cbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049aa:	609a      	str	r2, [r3, #8]
      break;
 80049ac:	e03c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ba:	461a      	mov	r2, r3
 80049bc:	f000 f902 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2150      	movs	r1, #80	@ 0x50
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f95b 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 80049cc:	e02c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049da:	461a      	mov	r2, r3
 80049dc:	f000 f921 	bl	8004c22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2160      	movs	r1, #96	@ 0x60
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f94b 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 80049ec:	e01c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 f8e2 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2140      	movs	r1, #64	@ 0x40
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f93b 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e00c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f000 f932 	bl	8004c82 <TIM_ITRx_SetConfig>
      break;
 8004a1e:	e003      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	00100070 	.word	0x00100070
 8004a48:	00100060 	.word	0x00100060
 8004a4c:	00100050 	.word	0x00100050
 8004a50:	00100040 	.word	0x00100040
 8004a54:	00100030 	.word	0x00100030
 8004a58:	00100020 	.word	0x00100020

08004a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba0 <TIM_Base_SetConfig+0x144>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d017      	beq.n	8004aa4 <TIM_Base_SetConfig+0x48>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7a:	d013      	beq.n	8004aa4 <TIM_Base_SetConfig+0x48>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a49      	ldr	r2, [pc, #292]	@ (8004ba4 <TIM_Base_SetConfig+0x148>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00f      	beq.n	8004aa4 <TIM_Base_SetConfig+0x48>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a48      	ldr	r2, [pc, #288]	@ (8004ba8 <TIM_Base_SetConfig+0x14c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_Base_SetConfig+0x48>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a47      	ldr	r2, [pc, #284]	@ (8004bac <TIM_Base_SetConfig+0x150>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_Base_SetConfig+0x48>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a46      	ldr	r2, [pc, #280]	@ (8004bb0 <TIM_Base_SetConfig+0x154>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0x48>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a45      	ldr	r2, [pc, #276]	@ (8004bb4 <TIM_Base_SetConfig+0x158>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a39      	ldr	r2, [pc, #228]	@ (8004ba0 <TIM_Base_SetConfig+0x144>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d023      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac4:	d01f      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a36      	ldr	r2, [pc, #216]	@ (8004ba4 <TIM_Base_SetConfig+0x148>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01b      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a35      	ldr	r2, [pc, #212]	@ (8004ba8 <TIM_Base_SetConfig+0x14c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d017      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a34      	ldr	r2, [pc, #208]	@ (8004bac <TIM_Base_SetConfig+0x150>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a33      	ldr	r2, [pc, #204]	@ (8004bb0 <TIM_Base_SetConfig+0x154>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00f      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a33      	ldr	r2, [pc, #204]	@ (8004bb8 <TIM_Base_SetConfig+0x15c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a32      	ldr	r2, [pc, #200]	@ (8004bbc <TIM_Base_SetConfig+0x160>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a31      	ldr	r2, [pc, #196]	@ (8004bc0 <TIM_Base_SetConfig+0x164>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_Base_SetConfig+0xaa>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb4 <TIM_Base_SetConfig+0x158>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d108      	bne.n	8004b18 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <TIM_Base_SetConfig+0x144>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d013      	beq.n	8004b6c <TIM_Base_SetConfig+0x110>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb0 <TIM_Base_SetConfig+0x154>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00f      	beq.n	8004b6c <TIM_Base_SetConfig+0x110>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <TIM_Base_SetConfig+0x15c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_Base_SetConfig+0x110>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a19      	ldr	r2, [pc, #100]	@ (8004bbc <TIM_Base_SetConfig+0x160>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0x110>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <TIM_Base_SetConfig+0x164>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0x110>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a13      	ldr	r2, [pc, #76]	@ (8004bb4 <TIM_Base_SetConfig+0x158>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d105      	bne.n	8004b92 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]
  }
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40015000 	.word	0x40015000
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800

08004bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 030a 	bic.w	r3, r3, #10
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b087      	sub	sp, #28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f023 0210 	bic.w	r2, r3, #16
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	031b      	lsls	r3, r3, #12
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f043 0307 	orr.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2201      	movs	r2, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	401a      	ands	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e074      	b.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a34      	ldr	r2, [pc, #208]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a33      	ldr	r2, [pc, #204]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a31      	ldr	r2, [pc, #196]	@ (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004da4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d022      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de0:	d01d      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d018      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a15      	ldr	r2, [pc, #84]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a11      	ldr	r2, [pc, #68]	@ (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10c      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40015000 	.word	0x40015000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40014000 	.word	0x40014000

08004e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e042      	b.n	8004f0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7fd fdbb 	bl	8002a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2224      	movs	r2, #36	@ 0x24
 8004ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fb24 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f825 	bl	8004f14 <UART_SetConfig>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e01b      	b.n	8004f0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fba3 	bl	8005650 <UART_CheckIdleState>
 8004f0a:	4603      	mov	r3, r0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f18:	b08c      	sub	sp, #48	@ 0x30
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4baa      	ldr	r3, [pc, #680]	@ (80051ec <UART_SetConfig+0x2d8>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a9f      	ldr	r2, [pc, #636]	@ (80051f0 <UART_SetConfig+0x2dc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	f023 010f 	bic.w	r1, r3, #15
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a90      	ldr	r2, [pc, #576]	@ (80051f4 <UART_SetConfig+0x2e0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d125      	bne.n	8005004 <UART_SetConfig+0xf0>
 8004fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80051f8 <UART_SetConfig+0x2e4>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d81a      	bhi.n	8004ffc <UART_SetConfig+0xe8>
 8004fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <UART_SetConfig+0xb8>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fed 	.word	0x08004fed
 8004fd4:	08004fe5 	.word	0x08004fe5
 8004fd8:	08004ff5 	.word	0x08004ff5
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe2:	e116      	b.n	8005212 <UART_SetConfig+0x2fe>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fea:	e112      	b.n	8005212 <UART_SetConfig+0x2fe>
 8004fec:	2304      	movs	r3, #4
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff2:	e10e      	b.n	8005212 <UART_SetConfig+0x2fe>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffa:	e10a      	b.n	8005212 <UART_SetConfig+0x2fe>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005002:	e106      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a7c      	ldr	r2, [pc, #496]	@ (80051fc <UART_SetConfig+0x2e8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d138      	bne.n	8005080 <UART_SetConfig+0x16c>
 800500e:	4b7a      	ldr	r3, [pc, #488]	@ (80051f8 <UART_SetConfig+0x2e4>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b0c      	cmp	r3, #12
 800501a:	d82d      	bhi.n	8005078 <UART_SetConfig+0x164>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0x110>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005059 	.word	0x08005059
 8005028:	08005079 	.word	0x08005079
 800502c:	08005079 	.word	0x08005079
 8005030:	08005079 	.word	0x08005079
 8005034:	08005069 	.word	0x08005069
 8005038:	08005079 	.word	0x08005079
 800503c:	08005079 	.word	0x08005079
 8005040:	08005079 	.word	0x08005079
 8005044:	08005061 	.word	0x08005061
 8005048:	08005079 	.word	0x08005079
 800504c:	08005079 	.word	0x08005079
 8005050:	08005079 	.word	0x08005079
 8005054:	08005071 	.word	0x08005071
 8005058:	2300      	movs	r3, #0
 800505a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505e:	e0d8      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005060:	2302      	movs	r3, #2
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005066:	e0d4      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005068:	2304      	movs	r3, #4
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506e:	e0d0      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005070:	2308      	movs	r3, #8
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005076:	e0cc      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005078:	2310      	movs	r3, #16
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800507e:	e0c8      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a5e      	ldr	r2, [pc, #376]	@ (8005200 <UART_SetConfig+0x2ec>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d125      	bne.n	80050d6 <UART_SetConfig+0x1c2>
 800508a:	4b5b      	ldr	r3, [pc, #364]	@ (80051f8 <UART_SetConfig+0x2e4>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005094:	2b30      	cmp	r3, #48	@ 0x30
 8005096:	d016      	beq.n	80050c6 <UART_SetConfig+0x1b2>
 8005098:	2b30      	cmp	r3, #48	@ 0x30
 800509a:	d818      	bhi.n	80050ce <UART_SetConfig+0x1ba>
 800509c:	2b20      	cmp	r3, #32
 800509e:	d00a      	beq.n	80050b6 <UART_SetConfig+0x1a2>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d814      	bhi.n	80050ce <UART_SetConfig+0x1ba>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <UART_SetConfig+0x19a>
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d008      	beq.n	80050be <UART_SetConfig+0x1aa>
 80050ac:	e00f      	b.n	80050ce <UART_SetConfig+0x1ba>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b4:	e0ad      	b.n	8005212 <UART_SetConfig+0x2fe>
 80050b6:	2302      	movs	r3, #2
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050bc:	e0a9      	b.n	8005212 <UART_SetConfig+0x2fe>
 80050be:	2304      	movs	r3, #4
 80050c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c4:	e0a5      	b.n	8005212 <UART_SetConfig+0x2fe>
 80050c6:	2308      	movs	r3, #8
 80050c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050cc:	e0a1      	b.n	8005212 <UART_SetConfig+0x2fe>
 80050ce:	2310      	movs	r3, #16
 80050d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d4:	e09d      	b.n	8005212 <UART_SetConfig+0x2fe>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a4a      	ldr	r2, [pc, #296]	@ (8005204 <UART_SetConfig+0x2f0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d125      	bne.n	800512c <UART_SetConfig+0x218>
 80050e0:	4b45      	ldr	r3, [pc, #276]	@ (80051f8 <UART_SetConfig+0x2e4>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80050ec:	d016      	beq.n	800511c <UART_SetConfig+0x208>
 80050ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80050f0:	d818      	bhi.n	8005124 <UART_SetConfig+0x210>
 80050f2:	2b80      	cmp	r3, #128	@ 0x80
 80050f4:	d00a      	beq.n	800510c <UART_SetConfig+0x1f8>
 80050f6:	2b80      	cmp	r3, #128	@ 0x80
 80050f8:	d814      	bhi.n	8005124 <UART_SetConfig+0x210>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <UART_SetConfig+0x1f0>
 80050fe:	2b40      	cmp	r3, #64	@ 0x40
 8005100:	d008      	beq.n	8005114 <UART_SetConfig+0x200>
 8005102:	e00f      	b.n	8005124 <UART_SetConfig+0x210>
 8005104:	2300      	movs	r3, #0
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510a:	e082      	b.n	8005212 <UART_SetConfig+0x2fe>
 800510c:	2302      	movs	r3, #2
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005112:	e07e      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511a:	e07a      	b.n	8005212 <UART_SetConfig+0x2fe>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005122:	e076      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800512a:	e072      	b.n	8005212 <UART_SetConfig+0x2fe>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a35      	ldr	r2, [pc, #212]	@ (8005208 <UART_SetConfig+0x2f4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d12a      	bne.n	800518c <UART_SetConfig+0x278>
 8005136:	4b30      	ldr	r3, [pc, #192]	@ (80051f8 <UART_SetConfig+0x2e4>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005144:	d01a      	beq.n	800517c <UART_SetConfig+0x268>
 8005146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800514a:	d81b      	bhi.n	8005184 <UART_SetConfig+0x270>
 800514c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005150:	d00c      	beq.n	800516c <UART_SetConfig+0x258>
 8005152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005156:	d815      	bhi.n	8005184 <UART_SetConfig+0x270>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <UART_SetConfig+0x250>
 800515c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005160:	d008      	beq.n	8005174 <UART_SetConfig+0x260>
 8005162:	e00f      	b.n	8005184 <UART_SetConfig+0x270>
 8005164:	2300      	movs	r3, #0
 8005166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516a:	e052      	b.n	8005212 <UART_SetConfig+0x2fe>
 800516c:	2302      	movs	r3, #2
 800516e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005172:	e04e      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005174:	2304      	movs	r3, #4
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517a:	e04a      	b.n	8005212 <UART_SetConfig+0x2fe>
 800517c:	2308      	movs	r3, #8
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005182:	e046      	b.n	8005212 <UART_SetConfig+0x2fe>
 8005184:	2310      	movs	r3, #16
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518a:	e042      	b.n	8005212 <UART_SetConfig+0x2fe>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <UART_SetConfig+0x2dc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d13a      	bne.n	800520c <UART_SetConfig+0x2f8>
 8005196:	4b18      	ldr	r3, [pc, #96]	@ (80051f8 <UART_SetConfig+0x2e4>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051a4:	d01a      	beq.n	80051dc <UART_SetConfig+0x2c8>
 80051a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051aa:	d81b      	bhi.n	80051e4 <UART_SetConfig+0x2d0>
 80051ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b0:	d00c      	beq.n	80051cc <UART_SetConfig+0x2b8>
 80051b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b6:	d815      	bhi.n	80051e4 <UART_SetConfig+0x2d0>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <UART_SetConfig+0x2b0>
 80051bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c0:	d008      	beq.n	80051d4 <UART_SetConfig+0x2c0>
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x2d0>
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ca:	e022      	b.n	8005212 <UART_SetConfig+0x2fe>
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	e01e      	b.n	8005212 <UART_SetConfig+0x2fe>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051da:	e01a      	b.n	8005212 <UART_SetConfig+0x2fe>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e016      	b.n	8005212 <UART_SetConfig+0x2fe>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e012      	b.n	8005212 <UART_SetConfig+0x2fe>
 80051ec:	cfff69f3 	.word	0xcfff69f3
 80051f0:	40008000 	.word	0x40008000
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40004400 	.word	0x40004400
 8005200:	40004800 	.word	0x40004800
 8005204:	40004c00 	.word	0x40004c00
 8005208:	40005000 	.word	0x40005000
 800520c:	2310      	movs	r3, #16
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4aae      	ldr	r2, [pc, #696]	@ (80054d0 <UART_SetConfig+0x5bc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	f040 8097 	bne.w	800534c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800521e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005222:	2b08      	cmp	r3, #8
 8005224:	d823      	bhi.n	800526e <UART_SetConfig+0x35a>
 8005226:	a201      	add	r2, pc, #4	@ (adr r2, 800522c <UART_SetConfig+0x318>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	08005251 	.word	0x08005251
 8005230:	0800526f 	.word	0x0800526f
 8005234:	08005259 	.word	0x08005259
 8005238:	0800526f 	.word	0x0800526f
 800523c:	0800525f 	.word	0x0800525f
 8005240:	0800526f 	.word	0x0800526f
 8005244:	0800526f 	.word	0x0800526f
 8005248:	0800526f 	.word	0x0800526f
 800524c:	08005267 	.word	0x08005267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005250:	f7fe fdba 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 8005254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005256:	e010      	b.n	800527a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005258:	4b9e      	ldr	r3, [pc, #632]	@ (80054d4 <UART_SetConfig+0x5c0>)
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800525c:	e00d      	b.n	800527a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800525e:	f7fe fd45 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8005262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005264:	e009      	b.n	800527a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800526c:	e005      	b.n	800527a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8130 	beq.w	80054e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	4a94      	ldr	r2, [pc, #592]	@ (80054d8 <UART_SetConfig+0x5c4>)
 8005288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800528c:	461a      	mov	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	fbb3 f3f2 	udiv	r3, r3, r2
 8005294:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d305      	bcc.n	80052b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d903      	bls.n	80052ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052b8:	e113      	b.n	80054e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	2200      	movs	r2, #0
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	60fa      	str	r2, [r7, #12]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c6:	4a84      	ldr	r2, [pc, #528]	@ (80054d8 <UART_SetConfig+0x5c4>)
 80052c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2200      	movs	r2, #0
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052dc:	f7fb fd66 	bl	8000dac <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	020b      	lsls	r3, r1, #8
 80052f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052f6:	0202      	lsls	r2, r0, #8
 80052f8:	6979      	ldr	r1, [r7, #20]
 80052fa:	6849      	ldr	r1, [r1, #4]
 80052fc:	0849      	lsrs	r1, r1, #1
 80052fe:	2000      	movs	r0, #0
 8005300:	460c      	mov	r4, r1
 8005302:	4605      	mov	r5, r0
 8005304:	eb12 0804 	adds.w	r8, r2, r4
 8005308:	eb43 0905 	adc.w	r9, r3, r5
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	469a      	mov	sl, r3
 8005314:	4693      	mov	fp, r2
 8005316:	4652      	mov	r2, sl
 8005318:	465b      	mov	r3, fp
 800531a:	4640      	mov	r0, r8
 800531c:	4649      	mov	r1, r9
 800531e:	f7fb fd45 	bl	8000dac <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4613      	mov	r3, r2
 8005328:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005330:	d308      	bcc.n	8005344 <UART_SetConfig+0x430>
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005338:	d204      	bcs.n	8005344 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	e0ce      	b.n	80054e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800534a:	e0ca      	b.n	80054e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005354:	d166      	bne.n	8005424 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005356:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800535a:	2b08      	cmp	r3, #8
 800535c:	d827      	bhi.n	80053ae <UART_SetConfig+0x49a>
 800535e:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <UART_SetConfig+0x450>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005389 	.word	0x08005389
 8005368:	08005391 	.word	0x08005391
 800536c:	08005399 	.word	0x08005399
 8005370:	080053af 	.word	0x080053af
 8005374:	0800539f 	.word	0x0800539f
 8005378:	080053af 	.word	0x080053af
 800537c:	080053af 	.word	0x080053af
 8005380:	080053af 	.word	0x080053af
 8005384:	080053a7 	.word	0x080053a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005388:	f7fe fd1e 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 800538c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800538e:	e014      	b.n	80053ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005390:	f7fe fd30 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8005394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005396:	e010      	b.n	80053ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005398:	4b4e      	ldr	r3, [pc, #312]	@ (80054d4 <UART_SetConfig+0x5c0>)
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800539c:	e00d      	b.n	80053ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800539e:	f7fe fca5 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 80053a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a4:	e009      	b.n	80053ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053ac:	e005      	b.n	80053ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8090 	beq.w	80054e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	4a44      	ldr	r2, [pc, #272]	@ (80054d8 <UART_SetConfig+0x5c4>)
 80053c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053d4:	005a      	lsls	r2, r3, #1
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	441a      	add	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	2b0f      	cmp	r3, #15
 80053ec:	d916      	bls.n	800541c <UART_SetConfig+0x508>
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f4:	d212      	bcs.n	800541c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f023 030f 	bic.w	r3, r3, #15
 80053fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	b29b      	uxth	r3, r3
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	b29a      	uxth	r2, r3
 800540c:	8bfb      	ldrh	r3, [r7, #30]
 800540e:	4313      	orrs	r3, r2
 8005410:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	8bfa      	ldrh	r2, [r7, #30]
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	e062      	b.n	80054e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005422:	e05e      	b.n	80054e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005424:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005428:	2b08      	cmp	r3, #8
 800542a:	d828      	bhi.n	800547e <UART_SetConfig+0x56a>
 800542c:	a201      	add	r2, pc, #4	@ (adr r2, 8005434 <UART_SetConfig+0x520>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005459 	.word	0x08005459
 8005438:	08005461 	.word	0x08005461
 800543c:	08005469 	.word	0x08005469
 8005440:	0800547f 	.word	0x0800547f
 8005444:	0800546f 	.word	0x0800546f
 8005448:	0800547f 	.word	0x0800547f
 800544c:	0800547f 	.word	0x0800547f
 8005450:	0800547f 	.word	0x0800547f
 8005454:	08005477 	.word	0x08005477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005458:	f7fe fcb6 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 800545c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800545e:	e014      	b.n	800548a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005460:	f7fe fcc8 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 8005464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005466:	e010      	b.n	800548a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005468:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <UART_SetConfig+0x5c0>)
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800546c:	e00d      	b.n	800548a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546e:	f7fe fc3d 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8005472:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005474:	e009      	b.n	800548a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800547c:	e005      	b.n	800548a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005488:	bf00      	nop
    }

    if (pclk != 0U)
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d028      	beq.n	80054e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	4a10      	ldr	r2, [pc, #64]	@ (80054d8 <UART_SetConfig+0x5c4>)
 8005496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549a:	461a      	mov	r2, r3
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	fbb3 f2f2 	udiv	r2, r3, r2
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	441a      	add	r2, r3
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	d910      	bls.n	80054dc <UART_SetConfig+0x5c8>
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c0:	d20c      	bcs.n	80054dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	e009      	b.n	80054e2 <UART_SetConfig+0x5ce>
 80054ce:	bf00      	nop
 80054d0:	40008000 	.word	0x40008000
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	08006b00 	.word	0x08006b00
      }
      else
      {
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2200      	movs	r2, #0
 80054fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005502:	4618      	mov	r0, r3
 8005504:	3730      	adds	r7, #48	@ 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800560a:	d10a      	bne.n	8005622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b098      	sub	sp, #96	@ 0x60
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005660:	f7fd fb68 	bl	8002d34 <HAL_GetTick>
 8005664:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d12f      	bne.n	80056d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f88e 	bl	80057a4 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d022      	beq.n	80056d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800569c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e6      	bne.n	800568e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e063      	b.n	800579c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d149      	bne.n	8005776 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ea:	2200      	movs	r2, #0
 80056ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f857 	bl	80057a4 <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d03c      	beq.n	8005776 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	623b      	str	r3, [r7, #32]
   return(result);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800571a:	633b      	str	r3, [r7, #48]	@ 0x30
 800571c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	60fb      	str	r3, [r7, #12]
   return(result);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800574e:	61fa      	str	r2, [r7, #28]
 8005750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	69b9      	ldr	r1, [r7, #24]
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	617b      	str	r3, [r7, #20]
   return(result);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e012      	b.n	800579c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3758      	adds	r7, #88	@ 0x58
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b4:	e04f      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d04b      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fd fab9 	bl	8002d34 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e04e      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d037      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b80      	cmp	r3, #128	@ 0x80
 80057ea:	d034      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b40      	cmp	r3, #64	@ 0x40
 80057f0:	d031      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d110      	bne.n	8005822 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2208      	movs	r2, #8
 8005806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f838 	bl	800587e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2208      	movs	r2, #8
 8005812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e029      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005830:	d111      	bne.n	8005856 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800583a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f81e 	bl	800587e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e00f      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	429a      	cmp	r2, r3
 8005872:	d0a0      	beq.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800587e:	b480      	push	{r7}
 8005880:	b095      	sub	sp, #84	@ 0x54
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800589a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80058a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e6      	bne.n	8005886 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e3      	bne.n	80058b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d118      	bne.n	800592a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	60bb      	str	r3, [r7, #8]
   return(result);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f023 0310 	bic.w	r3, r3, #16
 800590c:	647b      	str	r3, [r7, #68]	@ 0x44
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6979      	ldr	r1, [r7, #20]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	613b      	str	r3, [r7, #16]
   return(result);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e6      	bne.n	80058f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800593e:	bf00      	nop
 8005940:	3754      	adds	r7, #84	@ 0x54
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_UARTEx_DisableFifoMode+0x16>
 800595c:	2302      	movs	r3, #2
 800595e:	e027      	b.n	80059b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2224      	movs	r2, #36	@ 0x24
 800596c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800598e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e02d      	b.n	8005a30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2224      	movs	r2, #36	@ 0x24
 80059e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f84f 	bl	8005ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e02d      	b.n	8005aac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	@ 0x24
 8005a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f811 	bl	8005ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ad4:	e031      	b.n	8005b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ada:	2308      	movs	r3, #8
 8005adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	0e5b      	lsrs	r3, r3, #25
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	0f5b      	lsrs	r3, r3, #29
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	7b3a      	ldrb	r2, [r7, #12]
 8005b02:	4911      	ldr	r1, [pc, #68]	@ (8005b48 <UARTEx_SetNbDataToProcess+0x94>)
 8005b04:	5c8a      	ldrb	r2, [r1, r2]
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b0a:	7b3a      	ldrb	r2, [r7, #12]
 8005b0c:	490f      	ldr	r1, [pc, #60]	@ (8005b4c <UARTEx_SetNbDataToProcess+0x98>)
 8005b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	7b7a      	ldrb	r2, [r7, #13]
 8005b20:	4909      	ldr	r1, [pc, #36]	@ (8005b48 <UARTEx_SetNbDataToProcess+0x94>)
 8005b22:	5c8a      	ldrb	r2, [r1, r2]
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b28:	7b7a      	ldrb	r2, [r7, #13]
 8005b2a:	4908      	ldr	r1, [pc, #32]	@ (8005b4c <UARTEx_SetNbDataToProcess+0x98>)
 8005b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	08006b18 	.word	0x08006b18
 8005b4c:	08006b20 	.word	0x08006b20

08005b50 <memset>:
 8005b50:	4402      	add	r2, r0
 8005b52:	4603      	mov	r3, r0
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d100      	bne.n	8005b5a <memset+0xa>
 8005b58:	4770      	bx	lr
 8005b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b5e:	e7f9      	b.n	8005b54 <memset+0x4>

08005b60 <__errno>:
 8005b60:	4b01      	ldr	r3, [pc, #4]	@ (8005b68 <__errno+0x8>)
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000014 	.word	0x20000014

08005b6c <__libc_init_array>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ba4 <__libc_init_array+0x38>)
 8005b70:	4c0d      	ldr	r4, [pc, #52]	@ (8005ba8 <__libc_init_array+0x3c>)
 8005b72:	1b64      	subs	r4, r4, r5
 8005b74:	10a4      	asrs	r4, r4, #2
 8005b76:	2600      	movs	r6, #0
 8005b78:	42a6      	cmp	r6, r4
 8005b7a:	d109      	bne.n	8005b90 <__libc_init_array+0x24>
 8005b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005bac <__libc_init_array+0x40>)
 8005b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005bb0 <__libc_init_array+0x44>)
 8005b80:	f000 ff84 	bl	8006a8c <_init>
 8005b84:	1b64      	subs	r4, r4, r5
 8005b86:	10a4      	asrs	r4, r4, #2
 8005b88:	2600      	movs	r6, #0
 8005b8a:	42a6      	cmp	r6, r4
 8005b8c:	d105      	bne.n	8005b9a <__libc_init_array+0x2e>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b94:	4798      	blx	r3
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7ee      	b.n	8005b78 <__libc_init_array+0xc>
 8005b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9e:	4798      	blx	r3
 8005ba0:	3601      	adds	r6, #1
 8005ba2:	e7f2      	b.n	8005b8a <__libc_init_array+0x1e>
 8005ba4:	08006b60 	.word	0x08006b60
 8005ba8:	08006b60 	.word	0x08006b60
 8005bac:	08006b60 	.word	0x08006b60
 8005bb0:	08006b64 	.word	0x08006b64

08005bb4 <memcpy>:
 8005bb4:	440a      	add	r2, r1
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bbc:	d100      	bne.n	8005bc0 <memcpy+0xc>
 8005bbe:	4770      	bx	lr
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bca:	4291      	cmp	r1, r2
 8005bcc:	d1f9      	bne.n	8005bc2 <memcpy+0xe>
 8005bce:	bd10      	pop	{r4, pc}

08005bd0 <pow>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	ed2d 8b02 	vpush	{d8}
 8005bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8005bda:	eef0 8a60 	vmov.f32	s17, s1
 8005bde:	ec55 4b11 	vmov	r4, r5, d1
 8005be2:	f000 f871 	bl	8005cc8 <__ieee754_pow>
 8005be6:	4622      	mov	r2, r4
 8005be8:	462b      	mov	r3, r5
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	ec57 6b10 	vmov	r6, r7, d0
 8005bf2:	f7fa ff67 	bl	8000ac4 <__aeabi_dcmpun>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d13b      	bne.n	8005c72 <pow+0xa2>
 8005bfa:	ec51 0b18 	vmov	r0, r1, d8
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2300      	movs	r3, #0
 8005c02:	f7fa ff2d 	bl	8000a60 <__aeabi_dcmpeq>
 8005c06:	b1b8      	cbz	r0, 8005c38 <pow+0x68>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4629      	mov	r1, r5
 8005c10:	f7fa ff26 	bl	8000a60 <__aeabi_dcmpeq>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d146      	bne.n	8005ca6 <pow+0xd6>
 8005c18:	ec45 4b10 	vmov	d0, r4, r5
 8005c1c:	f000 f848 	bl	8005cb0 <finite>
 8005c20:	b338      	cbz	r0, 8005c72 <pow+0xa2>
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	4620      	mov	r0, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	f7fa ff23 	bl	8000a74 <__aeabi_dcmplt>
 8005c2e:	b300      	cbz	r0, 8005c72 <pow+0xa2>
 8005c30:	f7ff ff96 	bl	8005b60 <__errno>
 8005c34:	2322      	movs	r3, #34	@ 0x22
 8005c36:	e01b      	b.n	8005c70 <pow+0xa0>
 8005c38:	ec47 6b10 	vmov	d0, r6, r7
 8005c3c:	f000 f838 	bl	8005cb0 <finite>
 8005c40:	b9e0      	cbnz	r0, 8005c7c <pow+0xac>
 8005c42:	eeb0 0a48 	vmov.f32	s0, s16
 8005c46:	eef0 0a68 	vmov.f32	s1, s17
 8005c4a:	f000 f831 	bl	8005cb0 <finite>
 8005c4e:	b1a8      	cbz	r0, 8005c7c <pow+0xac>
 8005c50:	ec45 4b10 	vmov	d0, r4, r5
 8005c54:	f000 f82c 	bl	8005cb0 <finite>
 8005c58:	b180      	cbz	r0, 8005c7c <pow+0xac>
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	4630      	mov	r0, r6
 8005c60:	4639      	mov	r1, r7
 8005c62:	f7fa ff2f 	bl	8000ac4 <__aeabi_dcmpun>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d0e2      	beq.n	8005c30 <pow+0x60>
 8005c6a:	f7ff ff79 	bl	8005b60 <__errno>
 8005c6e:	2321      	movs	r3, #33	@ 0x21
 8005c70:	6003      	str	r3, [r0, #0]
 8005c72:	ecbd 8b02 	vpop	{d8}
 8005c76:	ec47 6b10 	vmov	d0, r6, r7
 8005c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4630      	mov	r0, r6
 8005c82:	4639      	mov	r1, r7
 8005c84:	f7fa feec 	bl	8000a60 <__aeabi_dcmpeq>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d0f2      	beq.n	8005c72 <pow+0xa2>
 8005c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c90:	eef0 0a68 	vmov.f32	s1, s17
 8005c94:	f000 f80c 	bl	8005cb0 <finite>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d0ea      	beq.n	8005c72 <pow+0xa2>
 8005c9c:	ec45 4b10 	vmov	d0, r4, r5
 8005ca0:	f000 f806 	bl	8005cb0 <finite>
 8005ca4:	e7c3      	b.n	8005c2e <pow+0x5e>
 8005ca6:	4f01      	ldr	r7, [pc, #4]	@ (8005cac <pow+0xdc>)
 8005ca8:	2600      	movs	r6, #0
 8005caa:	e7e2      	b.n	8005c72 <pow+0xa2>
 8005cac:	3ff00000 	.word	0x3ff00000

08005cb0 <finite>:
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	ed8d 0b00 	vstr	d0, [sp]
 8005cb6:	9801      	ldr	r0, [sp, #4]
 8005cb8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005cbc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005cc0:	0fc0      	lsrs	r0, r0, #31
 8005cc2:	b002      	add	sp, #8
 8005cc4:	4770      	bx	lr
	...

08005cc8 <__ieee754_pow>:
 8005cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	b091      	sub	sp, #68	@ 0x44
 8005cce:	ed8d 1b00 	vstr	d1, [sp]
 8005cd2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005cd6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005cda:	ea5a 0001 	orrs.w	r0, sl, r1
 8005cde:	ec57 6b10 	vmov	r6, r7, d0
 8005ce2:	d113      	bne.n	8005d0c <__ieee754_pow+0x44>
 8005ce4:	19b3      	adds	r3, r6, r6
 8005ce6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005cea:	4152      	adcs	r2, r2
 8005cec:	4298      	cmp	r0, r3
 8005cee:	4b98      	ldr	r3, [pc, #608]	@ (8005f50 <__ieee754_pow+0x288>)
 8005cf0:	4193      	sbcs	r3, r2
 8005cf2:	f080 84ea 	bcs.w	80066ca <__ieee754_pow+0xa02>
 8005cf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	f7fa fa91 	bl	8000224 <__adddf3>
 8005d02:	ec41 0b10 	vmov	d0, r0, r1
 8005d06:	b011      	add	sp, #68	@ 0x44
 8005d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0c:	4a91      	ldr	r2, [pc, #580]	@ (8005f54 <__ieee754_pow+0x28c>)
 8005d0e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005d12:	4590      	cmp	r8, r2
 8005d14:	463d      	mov	r5, r7
 8005d16:	4633      	mov	r3, r6
 8005d18:	d806      	bhi.n	8005d28 <__ieee754_pow+0x60>
 8005d1a:	d101      	bne.n	8005d20 <__ieee754_pow+0x58>
 8005d1c:	2e00      	cmp	r6, #0
 8005d1e:	d1ea      	bne.n	8005cf6 <__ieee754_pow+0x2e>
 8005d20:	4592      	cmp	sl, r2
 8005d22:	d801      	bhi.n	8005d28 <__ieee754_pow+0x60>
 8005d24:	d10e      	bne.n	8005d44 <__ieee754_pow+0x7c>
 8005d26:	b169      	cbz	r1, 8005d44 <__ieee754_pow+0x7c>
 8005d28:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005d2c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005d30:	431d      	orrs	r5, r3
 8005d32:	d1e0      	bne.n	8005cf6 <__ieee754_pow+0x2e>
 8005d34:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d38:	18db      	adds	r3, r3, r3
 8005d3a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005d3e:	4152      	adcs	r2, r2
 8005d40:	429d      	cmp	r5, r3
 8005d42:	e7d4      	b.n	8005cee <__ieee754_pow+0x26>
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	46c3      	mov	fp, r8
 8005d48:	da3a      	bge.n	8005dc0 <__ieee754_pow+0xf8>
 8005d4a:	4a83      	ldr	r2, [pc, #524]	@ (8005f58 <__ieee754_pow+0x290>)
 8005d4c:	4592      	cmp	sl, r2
 8005d4e:	d84d      	bhi.n	8005dec <__ieee754_pow+0x124>
 8005d50:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005d54:	4592      	cmp	sl, r2
 8005d56:	f240 84c7 	bls.w	80066e8 <__ieee754_pow+0xa20>
 8005d5a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005d5e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005d62:	2a14      	cmp	r2, #20
 8005d64:	dd0f      	ble.n	8005d86 <__ieee754_pow+0xbe>
 8005d66:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005d6a:	fa21 f402 	lsr.w	r4, r1, r2
 8005d6e:	fa04 f202 	lsl.w	r2, r4, r2
 8005d72:	428a      	cmp	r2, r1
 8005d74:	f040 84b8 	bne.w	80066e8 <__ieee754_pow+0xa20>
 8005d78:	f004 0401 	and.w	r4, r4, #1
 8005d7c:	f1c4 0402 	rsb	r4, r4, #2
 8005d80:	2900      	cmp	r1, #0
 8005d82:	d158      	bne.n	8005e36 <__ieee754_pow+0x16e>
 8005d84:	e00e      	b.n	8005da4 <__ieee754_pow+0xdc>
 8005d86:	2900      	cmp	r1, #0
 8005d88:	d154      	bne.n	8005e34 <__ieee754_pow+0x16c>
 8005d8a:	f1c2 0214 	rsb	r2, r2, #20
 8005d8e:	fa4a f402 	asr.w	r4, sl, r2
 8005d92:	fa04 f202 	lsl.w	r2, r4, r2
 8005d96:	4552      	cmp	r2, sl
 8005d98:	f040 84a3 	bne.w	80066e2 <__ieee754_pow+0xa1a>
 8005d9c:	f004 0401 	and.w	r4, r4, #1
 8005da0:	f1c4 0402 	rsb	r4, r4, #2
 8005da4:	4a6d      	ldr	r2, [pc, #436]	@ (8005f5c <__ieee754_pow+0x294>)
 8005da6:	4592      	cmp	sl, r2
 8005da8:	d12e      	bne.n	8005e08 <__ieee754_pow+0x140>
 8005daa:	f1b9 0f00 	cmp.w	r9, #0
 8005dae:	f280 8494 	bge.w	80066da <__ieee754_pow+0xa12>
 8005db2:	496a      	ldr	r1, [pc, #424]	@ (8005f5c <__ieee754_pow+0x294>)
 8005db4:	4632      	mov	r2, r6
 8005db6:	463b      	mov	r3, r7
 8005db8:	2000      	movs	r0, #0
 8005dba:	f7fa fd13 	bl	80007e4 <__aeabi_ddiv>
 8005dbe:	e7a0      	b.n	8005d02 <__ieee754_pow+0x3a>
 8005dc0:	2400      	movs	r4, #0
 8005dc2:	bbc1      	cbnz	r1, 8005e36 <__ieee754_pow+0x16e>
 8005dc4:	4a63      	ldr	r2, [pc, #396]	@ (8005f54 <__ieee754_pow+0x28c>)
 8005dc6:	4592      	cmp	sl, r2
 8005dc8:	d1ec      	bne.n	8005da4 <__ieee754_pow+0xdc>
 8005dca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8005dce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	f000 8479 	beq.w	80066ca <__ieee754_pow+0xa02>
 8005dd8:	4b61      	ldr	r3, [pc, #388]	@ (8005f60 <__ieee754_pow+0x298>)
 8005dda:	4598      	cmp	r8, r3
 8005ddc:	d908      	bls.n	8005df0 <__ieee754_pow+0x128>
 8005dde:	f1b9 0f00 	cmp.w	r9, #0
 8005de2:	f2c0 8476 	blt.w	80066d2 <__ieee754_pow+0xa0a>
 8005de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dea:	e78a      	b.n	8005d02 <__ieee754_pow+0x3a>
 8005dec:	2402      	movs	r4, #2
 8005dee:	e7e8      	b.n	8005dc2 <__ieee754_pow+0xfa>
 8005df0:	f1b9 0f00 	cmp.w	r9, #0
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	da81      	bge.n	8005d02 <__ieee754_pow+0x3a>
 8005dfe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005e02:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005e06:	e77c      	b.n	8005d02 <__ieee754_pow+0x3a>
 8005e08:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005e0c:	d106      	bne.n	8005e1c <__ieee754_pow+0x154>
 8005e0e:	4632      	mov	r2, r6
 8005e10:	463b      	mov	r3, r7
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa fbbb 	bl	8000590 <__aeabi_dmul>
 8005e1a:	e772      	b.n	8005d02 <__ieee754_pow+0x3a>
 8005e1c:	4a51      	ldr	r2, [pc, #324]	@ (8005f64 <__ieee754_pow+0x29c>)
 8005e1e:	4591      	cmp	r9, r2
 8005e20:	d109      	bne.n	8005e36 <__ieee754_pow+0x16e>
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	db07      	blt.n	8005e36 <__ieee754_pow+0x16e>
 8005e26:	ec47 6b10 	vmov	d0, r6, r7
 8005e2a:	b011      	add	sp, #68	@ 0x44
 8005e2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	f000 bd52 	b.w	80068d8 <__ieee754_sqrt>
 8005e34:	2400      	movs	r4, #0
 8005e36:	ec47 6b10 	vmov	d0, r6, r7
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	f000 fc88 	bl	8006750 <fabs>
 8005e40:	9b02      	ldr	r3, [sp, #8]
 8005e42:	ec51 0b10 	vmov	r0, r1, d0
 8005e46:	bb53      	cbnz	r3, 8005e9e <__ieee754_pow+0x1d6>
 8005e48:	4b44      	ldr	r3, [pc, #272]	@ (8005f5c <__ieee754_pow+0x294>)
 8005e4a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d002      	beq.n	8005e58 <__ieee754_pow+0x190>
 8005e52:	f1b8 0f00 	cmp.w	r8, #0
 8005e56:	d122      	bne.n	8005e9e <__ieee754_pow+0x1d6>
 8005e58:	f1b9 0f00 	cmp.w	r9, #0
 8005e5c:	da05      	bge.n	8005e6a <__ieee754_pow+0x1a2>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	2000      	movs	r0, #0
 8005e64:	493d      	ldr	r1, [pc, #244]	@ (8005f5c <__ieee754_pow+0x294>)
 8005e66:	f7fa fcbd 	bl	80007e4 <__aeabi_ddiv>
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	f6bf af49 	bge.w	8005d02 <__ieee754_pow+0x3a>
 8005e70:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005e74:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005e78:	ea58 0804 	orrs.w	r8, r8, r4
 8005e7c:	d108      	bne.n	8005e90 <__ieee754_pow+0x1c8>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	f7fa f9cb 	bl	8000220 <__aeabi_dsub>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	e794      	b.n	8005dba <__ieee754_pow+0xf2>
 8005e90:	2c01      	cmp	r4, #1
 8005e92:	f47f af36 	bne.w	8005d02 <__ieee754_pow+0x3a>
 8005e96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	e731      	b.n	8005d02 <__ieee754_pow+0x3a>
 8005e9e:	0feb      	lsrs	r3, r5, #31
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	ea53 0204 	orrs.w	r2, r3, r4
 8005ea6:	d102      	bne.n	8005eae <__ieee754_pow+0x1e6>
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	463b      	mov	r3, r7
 8005eac:	e7e9      	b.n	8005e82 <__ieee754_pow+0x1ba>
 8005eae:	3c01      	subs	r4, #1
 8005eb0:	431c      	orrs	r4, r3
 8005eb2:	d016      	beq.n	8005ee2 <__ieee754_pow+0x21a>
 8005eb4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005f40 <__ieee754_pow+0x278>
 8005eb8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005ebc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ec0:	f240 8112 	bls.w	80060e8 <__ieee754_pow+0x420>
 8005ec4:	4b28      	ldr	r3, [pc, #160]	@ (8005f68 <__ieee754_pow+0x2a0>)
 8005ec6:	459a      	cmp	sl, r3
 8005ec8:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <__ieee754_pow+0x298>)
 8005eca:	d916      	bls.n	8005efa <__ieee754_pow+0x232>
 8005ecc:	4598      	cmp	r8, r3
 8005ece:	d80b      	bhi.n	8005ee8 <__ieee754_pow+0x220>
 8005ed0:	f1b9 0f00 	cmp.w	r9, #0
 8005ed4:	da0b      	bge.n	8005eee <__ieee754_pow+0x226>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	b011      	add	sp, #68	@ 0x44
 8005eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ede:	f000 bcf3 	b.w	80068c8 <__math_oflow>
 8005ee2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005f48 <__ieee754_pow+0x280>
 8005ee6:	e7e7      	b.n	8005eb8 <__ieee754_pow+0x1f0>
 8005ee8:	f1b9 0f00 	cmp.w	r9, #0
 8005eec:	dcf3      	bgt.n	8005ed6 <__ieee754_pow+0x20e>
 8005eee:	2000      	movs	r0, #0
 8005ef0:	b011      	add	sp, #68	@ 0x44
 8005ef2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef6:	f000 bcdf 	b.w	80068b8 <__math_uflow>
 8005efa:	4598      	cmp	r8, r3
 8005efc:	d20c      	bcs.n	8005f18 <__ieee754_pow+0x250>
 8005efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f7fa fdb5 	bl	8000a74 <__aeabi_dcmplt>
 8005f0a:	3800      	subs	r0, #0
 8005f0c:	bf18      	it	ne
 8005f0e:	2001      	movne	r0, #1
 8005f10:	f1b9 0f00 	cmp.w	r9, #0
 8005f14:	daec      	bge.n	8005ef0 <__ieee754_pow+0x228>
 8005f16:	e7df      	b.n	8005ed8 <__ieee754_pow+0x210>
 8005f18:	4b10      	ldr	r3, [pc, #64]	@ (8005f5c <__ieee754_pow+0x294>)
 8005f1a:	4598      	cmp	r8, r3
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	d924      	bls.n	8005f6c <__ieee754_pow+0x2a4>
 8005f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f26:	2300      	movs	r3, #0
 8005f28:	f7fa fda4 	bl	8000a74 <__aeabi_dcmplt>
 8005f2c:	3800      	subs	r0, #0
 8005f2e:	bf18      	it	ne
 8005f30:	2001      	movne	r0, #1
 8005f32:	f1b9 0f00 	cmp.w	r9, #0
 8005f36:	dccf      	bgt.n	8005ed8 <__ieee754_pow+0x210>
 8005f38:	e7da      	b.n	8005ef0 <__ieee754_pow+0x228>
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w
 8005f40:	00000000 	.word	0x00000000
 8005f44:	3ff00000 	.word	0x3ff00000
 8005f48:	00000000 	.word	0x00000000
 8005f4c:	bff00000 	.word	0xbff00000
 8005f50:	fff00000 	.word	0xfff00000
 8005f54:	7ff00000 	.word	0x7ff00000
 8005f58:	433fffff 	.word	0x433fffff
 8005f5c:	3ff00000 	.word	0x3ff00000
 8005f60:	3fefffff 	.word	0x3fefffff
 8005f64:	3fe00000 	.word	0x3fe00000
 8005f68:	43f00000 	.word	0x43f00000
 8005f6c:	4b5a      	ldr	r3, [pc, #360]	@ (80060d8 <__ieee754_pow+0x410>)
 8005f6e:	f7fa f957 	bl	8000220 <__aeabi_dsub>
 8005f72:	a351      	add	r3, pc, #324	@ (adr r3, 80060b8 <__ieee754_pow+0x3f0>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	f7fa fb08 	bl	8000590 <__aeabi_dmul>
 8005f80:	a34f      	add	r3, pc, #316	@ (adr r3, 80060c0 <__ieee754_pow+0x3f8>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	4606      	mov	r6, r0
 8005f88:	460f      	mov	r7, r1
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	f7fa faff 	bl	8000590 <__aeabi_dmul>
 8005f92:	4b52      	ldr	r3, [pc, #328]	@ (80060dc <__ieee754_pow+0x414>)
 8005f94:	4682      	mov	sl, r0
 8005f96:	468b      	mov	fp, r1
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f7fa faf7 	bl	8000590 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	a148      	add	r1, pc, #288	@ (adr r1, 80060c8 <__ieee754_pow+0x400>)
 8005fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fac:	f7fa f938 	bl	8000220 <__aeabi_dsub>
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	f7fa faec 	bl	8000590 <__aeabi_dmul>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	4948      	ldr	r1, [pc, #288]	@ (80060e0 <__ieee754_pow+0x418>)
 8005fc0:	f7fa f92e 	bl	8000220 <__aeabi_dsub>
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4680      	mov	r8, r0
 8005fc8:	4689      	mov	r9, r1
 8005fca:	462b      	mov	r3, r5
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa fade 	bl	8000590 <__aeabi_dmul>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4640      	mov	r0, r8
 8005fda:	4649      	mov	r1, r9
 8005fdc:	f7fa fad8 	bl	8000590 <__aeabi_dmul>
 8005fe0:	a33b      	add	r3, pc, #236	@ (adr r3, 80060d0 <__ieee754_pow+0x408>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f7fa fad3 	bl	8000590 <__aeabi_dmul>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4650      	mov	r0, sl
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	f7fa f915 	bl	8000220 <__aeabi_dsub>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4680      	mov	r8, r0
 8005ffc:	4689      	mov	r9, r1
 8005ffe:	4630      	mov	r0, r6
 8006000:	4639      	mov	r1, r7
 8006002:	f7fa f90f 	bl	8000224 <__adddf3>
 8006006:	2400      	movs	r4, #0
 8006008:	4632      	mov	r2, r6
 800600a:	463b      	mov	r3, r7
 800600c:	4620      	mov	r0, r4
 800600e:	460d      	mov	r5, r1
 8006010:	f7fa f906 	bl	8000220 <__aeabi_dsub>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4640      	mov	r0, r8
 800601a:	4649      	mov	r1, r9
 800601c:	f7fa f900 	bl	8000220 <__aeabi_dsub>
 8006020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006024:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006028:	2300      	movs	r3, #0
 800602a:	9304      	str	r3, [sp, #16]
 800602c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006030:	4606      	mov	r6, r0
 8006032:	460f      	mov	r7, r1
 8006034:	4652      	mov	r2, sl
 8006036:	465b      	mov	r3, fp
 8006038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800603c:	f7fa f8f0 	bl	8000220 <__aeabi_dsub>
 8006040:	4622      	mov	r2, r4
 8006042:	462b      	mov	r3, r5
 8006044:	f7fa faa4 	bl	8000590 <__aeabi_dmul>
 8006048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800604c:	4680      	mov	r8, r0
 800604e:	4689      	mov	r9, r1
 8006050:	4630      	mov	r0, r6
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa fa9c 	bl	8000590 <__aeabi_dmul>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa f8e0 	bl	8000224 <__adddf3>
 8006064:	4652      	mov	r2, sl
 8006066:	465b      	mov	r3, fp
 8006068:	4606      	mov	r6, r0
 800606a:	460f      	mov	r7, r1
 800606c:	4620      	mov	r0, r4
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa fa8e 	bl	8000590 <__aeabi_dmul>
 8006074:	460b      	mov	r3, r1
 8006076:	4602      	mov	r2, r0
 8006078:	4680      	mov	r8, r0
 800607a:	4689      	mov	r9, r1
 800607c:	4630      	mov	r0, r6
 800607e:	4639      	mov	r1, r7
 8006080:	f7fa f8d0 	bl	8000224 <__adddf3>
 8006084:	4b17      	ldr	r3, [pc, #92]	@ (80060e4 <__ieee754_pow+0x41c>)
 8006086:	4299      	cmp	r1, r3
 8006088:	4604      	mov	r4, r0
 800608a:	460d      	mov	r5, r1
 800608c:	468a      	mov	sl, r1
 800608e:	468b      	mov	fp, r1
 8006090:	f340 82ef 	ble.w	8006672 <__ieee754_pow+0x9aa>
 8006094:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006098:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800609c:	4303      	orrs	r3, r0
 800609e:	f000 81e8 	beq.w	8006472 <__ieee754_pow+0x7aa>
 80060a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2300      	movs	r3, #0
 80060aa:	f7fa fce3 	bl	8000a74 <__aeabi_dcmplt>
 80060ae:	3800      	subs	r0, #0
 80060b0:	bf18      	it	ne
 80060b2:	2001      	movne	r0, #1
 80060b4:	e710      	b.n	8005ed8 <__ieee754_pow+0x210>
 80060b6:	bf00      	nop
 80060b8:	60000000 	.word	0x60000000
 80060bc:	3ff71547 	.word	0x3ff71547
 80060c0:	f85ddf44 	.word	0xf85ddf44
 80060c4:	3e54ae0b 	.word	0x3e54ae0b
 80060c8:	55555555 	.word	0x55555555
 80060cc:	3fd55555 	.word	0x3fd55555
 80060d0:	652b82fe 	.word	0x652b82fe
 80060d4:	3ff71547 	.word	0x3ff71547
 80060d8:	3ff00000 	.word	0x3ff00000
 80060dc:	3fd00000 	.word	0x3fd00000
 80060e0:	3fe00000 	.word	0x3fe00000
 80060e4:	408fffff 	.word	0x408fffff
 80060e8:	4bd5      	ldr	r3, [pc, #852]	@ (8006440 <__ieee754_pow+0x778>)
 80060ea:	402b      	ands	r3, r5
 80060ec:	2200      	movs	r2, #0
 80060ee:	b92b      	cbnz	r3, 80060fc <__ieee754_pow+0x434>
 80060f0:	4bd4      	ldr	r3, [pc, #848]	@ (8006444 <__ieee754_pow+0x77c>)
 80060f2:	f7fa fa4d 	bl	8000590 <__aeabi_dmul>
 80060f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80060fa:	468b      	mov	fp, r1
 80060fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8006100:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006104:	4413      	add	r3, r2
 8006106:	930a      	str	r3, [sp, #40]	@ 0x28
 8006108:	4bcf      	ldr	r3, [pc, #828]	@ (8006448 <__ieee754_pow+0x780>)
 800610a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800610e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8006112:	459b      	cmp	fp, r3
 8006114:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006118:	dd08      	ble.n	800612c <__ieee754_pow+0x464>
 800611a:	4bcc      	ldr	r3, [pc, #816]	@ (800644c <__ieee754_pow+0x784>)
 800611c:	459b      	cmp	fp, r3
 800611e:	f340 81a5 	ble.w	800646c <__ieee754_pow+0x7a4>
 8006122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006124:	3301      	adds	r3, #1
 8006126:	930a      	str	r3, [sp, #40]	@ 0x28
 8006128:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800612c:	f04f 0a00 	mov.w	sl, #0
 8006130:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006134:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006136:	4bc6      	ldr	r3, [pc, #792]	@ (8006450 <__ieee754_pow+0x788>)
 8006138:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800613c:	ed93 7b00 	vldr	d7, [r3]
 8006140:	4629      	mov	r1, r5
 8006142:	ec53 2b17 	vmov	r2, r3, d7
 8006146:	ed8d 7b06 	vstr	d7, [sp, #24]
 800614a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800614e:	f7fa f867 	bl	8000220 <__aeabi_dsub>
 8006152:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006156:	4606      	mov	r6, r0
 8006158:	460f      	mov	r7, r1
 800615a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800615e:	f7fa f861 	bl	8000224 <__adddf3>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	2000      	movs	r0, #0
 8006168:	49ba      	ldr	r1, [pc, #744]	@ (8006454 <__ieee754_pow+0x78c>)
 800616a:	f7fa fb3b 	bl	80007e4 <__aeabi_ddiv>
 800616e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa fa09 	bl	8000590 <__aeabi_dmul>
 800617e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006182:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8006186:	106d      	asrs	r5, r5, #1
 8006188:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800618c:	f04f 0b00 	mov.w	fp, #0
 8006190:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006194:	4661      	mov	r1, ip
 8006196:	2200      	movs	r2, #0
 8006198:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800619c:	4658      	mov	r0, fp
 800619e:	46e1      	mov	r9, ip
 80061a0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80061a4:	4614      	mov	r4, r2
 80061a6:	461d      	mov	r5, r3
 80061a8:	f7fa f9f2 	bl	8000590 <__aeabi_dmul>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4630      	mov	r0, r6
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7fa f834 	bl	8000220 <__aeabi_dsub>
 80061b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061bc:	4606      	mov	r6, r0
 80061be:	460f      	mov	r7, r1
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7fa f82c 	bl	8000220 <__aeabi_dsub>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061d0:	f7fa f826 	bl	8000220 <__aeabi_dsub>
 80061d4:	465a      	mov	r2, fp
 80061d6:	464b      	mov	r3, r9
 80061d8:	f7fa f9da 	bl	8000590 <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7fa f81c 	bl	8000220 <__aeabi_dsub>
 80061e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80061ec:	f7fa f9d0 	bl	8000590 <__aeabi_dmul>
 80061f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061f8:	4610      	mov	r0, r2
 80061fa:	4619      	mov	r1, r3
 80061fc:	f7fa f9c8 	bl	8000590 <__aeabi_dmul>
 8006200:	a37d      	add	r3, pc, #500	@ (adr r3, 80063f8 <__ieee754_pow+0x730>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	4604      	mov	r4, r0
 8006208:	460d      	mov	r5, r1
 800620a:	f7fa f9c1 	bl	8000590 <__aeabi_dmul>
 800620e:	a37c      	add	r3, pc, #496	@ (adr r3, 8006400 <__ieee754_pow+0x738>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa f806 	bl	8000224 <__adddf3>
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	f7fa f9b8 	bl	8000590 <__aeabi_dmul>
 8006220:	a379      	add	r3, pc, #484	@ (adr r3, 8006408 <__ieee754_pow+0x740>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7f9 fffd 	bl	8000224 <__adddf3>
 800622a:	4622      	mov	r2, r4
 800622c:	462b      	mov	r3, r5
 800622e:	f7fa f9af 	bl	8000590 <__aeabi_dmul>
 8006232:	a377      	add	r3, pc, #476	@ (adr r3, 8006410 <__ieee754_pow+0x748>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7f9 fff4 	bl	8000224 <__adddf3>
 800623c:	4622      	mov	r2, r4
 800623e:	462b      	mov	r3, r5
 8006240:	f7fa f9a6 	bl	8000590 <__aeabi_dmul>
 8006244:	a374      	add	r3, pc, #464	@ (adr r3, 8006418 <__ieee754_pow+0x750>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7f9 ffeb 	bl	8000224 <__adddf3>
 800624e:	4622      	mov	r2, r4
 8006250:	462b      	mov	r3, r5
 8006252:	f7fa f99d 	bl	8000590 <__aeabi_dmul>
 8006256:	a372      	add	r3, pc, #456	@ (adr r3, 8006420 <__ieee754_pow+0x758>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7f9 ffe2 	bl	8000224 <__adddf3>
 8006260:	4622      	mov	r2, r4
 8006262:	4606      	mov	r6, r0
 8006264:	460f      	mov	r7, r1
 8006266:	462b      	mov	r3, r5
 8006268:	4620      	mov	r0, r4
 800626a:	4629      	mov	r1, r5
 800626c:	f7fa f990 	bl	8000590 <__aeabi_dmul>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fa f98a 	bl	8000590 <__aeabi_dmul>
 800627c:	465a      	mov	r2, fp
 800627e:	4604      	mov	r4, r0
 8006280:	460d      	mov	r5, r1
 8006282:	464b      	mov	r3, r9
 8006284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006288:	f7f9 ffcc 	bl	8000224 <__adddf3>
 800628c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006290:	f7fa f97e 	bl	8000590 <__aeabi_dmul>
 8006294:	4622      	mov	r2, r4
 8006296:	462b      	mov	r3, r5
 8006298:	f7f9 ffc4 	bl	8000224 <__adddf3>
 800629c:	465a      	mov	r2, fp
 800629e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062a2:	464b      	mov	r3, r9
 80062a4:	4658      	mov	r0, fp
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa f972 	bl	8000590 <__aeabi_dmul>
 80062ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006458 <__ieee754_pow+0x790>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	4606      	mov	r6, r0
 80062b2:	460f      	mov	r7, r1
 80062b4:	f7f9 ffb6 	bl	8000224 <__adddf3>
 80062b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062bc:	f7f9 ffb2 	bl	8000224 <__adddf3>
 80062c0:	46d8      	mov	r8, fp
 80062c2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80062c6:	460d      	mov	r5, r1
 80062c8:	465a      	mov	r2, fp
 80062ca:	460b      	mov	r3, r1
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80062d4:	f7fa f95c 	bl	8000590 <__aeabi_dmul>
 80062d8:	465c      	mov	r4, fp
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	4b5e      	ldr	r3, [pc, #376]	@ (8006458 <__ieee754_pow+0x790>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ff9b 	bl	8000220 <__aeabi_dsub>
 80062ea:	4632      	mov	r2, r6
 80062ec:	463b      	mov	r3, r7
 80062ee:	f7f9 ff97 	bl	8000220 <__aeabi_dsub>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062fa:	f7f9 ff91 	bl	8000220 <__aeabi_dsub>
 80062fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006302:	f7fa f945 	bl	8000590 <__aeabi_dmul>
 8006306:	4622      	mov	r2, r4
 8006308:	4606      	mov	r6, r0
 800630a:	460f      	mov	r7, r1
 800630c:	462b      	mov	r3, r5
 800630e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006312:	f7fa f93d 	bl	8000590 <__aeabi_dmul>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4630      	mov	r0, r6
 800631c:	4639      	mov	r1, r7
 800631e:	f7f9 ff81 	bl	8000224 <__adddf3>
 8006322:	4606      	mov	r6, r0
 8006324:	460f      	mov	r7, r1
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7f9 ff79 	bl	8000224 <__adddf3>
 8006332:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8006336:	a33c      	add	r3, pc, #240	@ (adr r3, 8006428 <__ieee754_pow+0x760>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	4658      	mov	r0, fp
 800633e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8006342:	460d      	mov	r5, r1
 8006344:	f7fa f924 	bl	8000590 <__aeabi_dmul>
 8006348:	465c      	mov	r4, fp
 800634a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800634e:	4642      	mov	r2, r8
 8006350:	464b      	mov	r3, r9
 8006352:	4620      	mov	r0, r4
 8006354:	4629      	mov	r1, r5
 8006356:	f7f9 ff63 	bl	8000220 <__aeabi_dsub>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7f9 ff5d 	bl	8000220 <__aeabi_dsub>
 8006366:	a332      	add	r3, pc, #200	@ (adr r3, 8006430 <__ieee754_pow+0x768>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7fa f910 	bl	8000590 <__aeabi_dmul>
 8006370:	a331      	add	r3, pc, #196	@ (adr r3, 8006438 <__ieee754_pow+0x770>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	4606      	mov	r6, r0
 8006378:	460f      	mov	r7, r1
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	f7fa f907 	bl	8000590 <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 ff4b 	bl	8000224 <__adddf3>
 800638e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006390:	4b32      	ldr	r3, [pc, #200]	@ (800645c <__ieee754_pow+0x794>)
 8006392:	4413      	add	r3, r2
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f7f9 ff44 	bl	8000224 <__adddf3>
 800639c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80063a2:	f7fa f88b 	bl	80004bc <__aeabi_i2d>
 80063a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80063a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006460 <__ieee754_pow+0x798>)
 80063aa:	4413      	add	r3, r2
 80063ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063b0:	4606      	mov	r6, r0
 80063b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b6:	460f      	mov	r7, r1
 80063b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063bc:	f7f9 ff32 	bl	8000224 <__adddf3>
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	f7f9 ff2e 	bl	8000224 <__adddf3>
 80063c8:	4632      	mov	r2, r6
 80063ca:	463b      	mov	r3, r7
 80063cc:	f7f9 ff2a 	bl	8000224 <__adddf3>
 80063d0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80063d4:	4632      	mov	r2, r6
 80063d6:	463b      	mov	r3, r7
 80063d8:	4658      	mov	r0, fp
 80063da:	460d      	mov	r5, r1
 80063dc:	f7f9 ff20 	bl	8000220 <__aeabi_dsub>
 80063e0:	4642      	mov	r2, r8
 80063e2:	464b      	mov	r3, r9
 80063e4:	f7f9 ff1c 	bl	8000220 <__aeabi_dsub>
 80063e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ec:	f7f9 ff18 	bl	8000220 <__aeabi_dsub>
 80063f0:	465c      	mov	r4, fp
 80063f2:	4602      	mov	r2, r0
 80063f4:	e036      	b.n	8006464 <__ieee754_pow+0x79c>
 80063f6:	bf00      	nop
 80063f8:	4a454eef 	.word	0x4a454eef
 80063fc:	3fca7e28 	.word	0x3fca7e28
 8006400:	93c9db65 	.word	0x93c9db65
 8006404:	3fcd864a 	.word	0x3fcd864a
 8006408:	a91d4101 	.word	0xa91d4101
 800640c:	3fd17460 	.word	0x3fd17460
 8006410:	518f264d 	.word	0x518f264d
 8006414:	3fd55555 	.word	0x3fd55555
 8006418:	db6fabff 	.word	0xdb6fabff
 800641c:	3fdb6db6 	.word	0x3fdb6db6
 8006420:	33333303 	.word	0x33333303
 8006424:	3fe33333 	.word	0x3fe33333
 8006428:	e0000000 	.word	0xe0000000
 800642c:	3feec709 	.word	0x3feec709
 8006430:	dc3a03fd 	.word	0xdc3a03fd
 8006434:	3feec709 	.word	0x3feec709
 8006438:	145b01f5 	.word	0x145b01f5
 800643c:	be3e2fe0 	.word	0xbe3e2fe0
 8006440:	7ff00000 	.word	0x7ff00000
 8006444:	43400000 	.word	0x43400000
 8006448:	0003988e 	.word	0x0003988e
 800644c:	000bb679 	.word	0x000bb679
 8006450:	08006b48 	.word	0x08006b48
 8006454:	3ff00000 	.word	0x3ff00000
 8006458:	40080000 	.word	0x40080000
 800645c:	08006b28 	.word	0x08006b28
 8006460:	08006b38 	.word	0x08006b38
 8006464:	460b      	mov	r3, r1
 8006466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800646a:	e5d7      	b.n	800601c <__ieee754_pow+0x354>
 800646c:	f04f 0a01 	mov.w	sl, #1
 8006470:	e65e      	b.n	8006130 <__ieee754_pow+0x468>
 8006472:	a3b4      	add	r3, pc, #720	@ (adr r3, 8006744 <__ieee754_pow+0xa7c>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	4630      	mov	r0, r6
 800647a:	4639      	mov	r1, r7
 800647c:	f7f9 fed2 	bl	8000224 <__adddf3>
 8006480:	4642      	mov	r2, r8
 8006482:	e9cd 0100 	strd	r0, r1, [sp]
 8006486:	464b      	mov	r3, r9
 8006488:	4620      	mov	r0, r4
 800648a:	4629      	mov	r1, r5
 800648c:	f7f9 fec8 	bl	8000220 <__aeabi_dsub>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006498:	f7fa fb0a 	bl	8000ab0 <__aeabi_dcmpgt>
 800649c:	2800      	cmp	r0, #0
 800649e:	f47f ae00 	bne.w	80060a2 <__ieee754_pow+0x3da>
 80064a2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80064a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80064aa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80064ae:	fa43 fa0a 	asr.w	sl, r3, sl
 80064b2:	44da      	add	sl, fp
 80064b4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80064b8:	489d      	ldr	r0, [pc, #628]	@ (8006730 <__ieee754_pow+0xa68>)
 80064ba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80064be:	4108      	asrs	r0, r1
 80064c0:	ea00 030a 	and.w	r3, r0, sl
 80064c4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80064c8:	f1c1 0114 	rsb	r1, r1, #20
 80064cc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80064d0:	fa4a fa01 	asr.w	sl, sl, r1
 80064d4:	f1bb 0f00 	cmp.w	fp, #0
 80064d8:	4640      	mov	r0, r8
 80064da:	4649      	mov	r1, r9
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	bfb8      	it	lt
 80064e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80064e6:	f7f9 fe9b 	bl	8000220 <__aeabi_dsub>
 80064ea:	4680      	mov	r8, r0
 80064ec:	4689      	mov	r9, r1
 80064ee:	4632      	mov	r2, r6
 80064f0:	463b      	mov	r3, r7
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	f7f9 fe95 	bl	8000224 <__adddf3>
 80064fa:	2400      	movs	r4, #0
 80064fc:	a37c      	add	r3, pc, #496	@ (adr r3, 80066f0 <__ieee754_pow+0xa28>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	4620      	mov	r0, r4
 8006504:	460d      	mov	r5, r1
 8006506:	f7fa f843 	bl	8000590 <__aeabi_dmul>
 800650a:	4642      	mov	r2, r8
 800650c:	e9cd 0100 	strd	r0, r1, [sp]
 8006510:	464b      	mov	r3, r9
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7f9 fe83 	bl	8000220 <__aeabi_dsub>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4630      	mov	r0, r6
 8006520:	4639      	mov	r1, r7
 8006522:	f7f9 fe7d 	bl	8000220 <__aeabi_dsub>
 8006526:	a374      	add	r3, pc, #464	@ (adr r3, 80066f8 <__ieee754_pow+0xa30>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f7fa f830 	bl	8000590 <__aeabi_dmul>
 8006530:	a373      	add	r3, pc, #460	@ (adr r3, 8006700 <__ieee754_pow+0xa38>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7fa f827 	bl	8000590 <__aeabi_dmul>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4640      	mov	r0, r8
 8006548:	4649      	mov	r1, r9
 800654a:	f7f9 fe6b 	bl	8000224 <__adddf3>
 800654e:	4604      	mov	r4, r0
 8006550:	460d      	mov	r5, r1
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800655a:	f7f9 fe63 	bl	8000224 <__adddf3>
 800655e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006562:	4680      	mov	r8, r0
 8006564:	4689      	mov	r9, r1
 8006566:	f7f9 fe5b 	bl	8000220 <__aeabi_dsub>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7f9 fe55 	bl	8000220 <__aeabi_dsub>
 8006576:	4642      	mov	r2, r8
 8006578:	4606      	mov	r6, r0
 800657a:	460f      	mov	r7, r1
 800657c:	464b      	mov	r3, r9
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7fa f805 	bl	8000590 <__aeabi_dmul>
 8006586:	a360      	add	r3, pc, #384	@ (adr r3, 8006708 <__ieee754_pow+0xa40>)
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	4604      	mov	r4, r0
 800658e:	460d      	mov	r5, r1
 8006590:	f7f9 fffe 	bl	8000590 <__aeabi_dmul>
 8006594:	a35e      	add	r3, pc, #376	@ (adr r3, 8006710 <__ieee754_pow+0xa48>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7f9 fe41 	bl	8000220 <__aeabi_dsub>
 800659e:	4622      	mov	r2, r4
 80065a0:	462b      	mov	r3, r5
 80065a2:	f7f9 fff5 	bl	8000590 <__aeabi_dmul>
 80065a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8006718 <__ieee754_pow+0xa50>)
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f7f9 fe3a 	bl	8000224 <__adddf3>
 80065b0:	4622      	mov	r2, r4
 80065b2:	462b      	mov	r3, r5
 80065b4:	f7f9 ffec 	bl	8000590 <__aeabi_dmul>
 80065b8:	a359      	add	r3, pc, #356	@ (adr r3, 8006720 <__ieee754_pow+0xa58>)
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f7f9 fe2f 	bl	8000220 <__aeabi_dsub>
 80065c2:	4622      	mov	r2, r4
 80065c4:	462b      	mov	r3, r5
 80065c6:	f7f9 ffe3 	bl	8000590 <__aeabi_dmul>
 80065ca:	a357      	add	r3, pc, #348	@ (adr r3, 8006728 <__ieee754_pow+0xa60>)
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f7f9 fe28 	bl	8000224 <__adddf3>
 80065d4:	4622      	mov	r2, r4
 80065d6:	462b      	mov	r3, r5
 80065d8:	f7f9 ffda 	bl	8000590 <__aeabi_dmul>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4640      	mov	r0, r8
 80065e2:	4649      	mov	r1, r9
 80065e4:	f7f9 fe1c 	bl	8000220 <__aeabi_dsub>
 80065e8:	4604      	mov	r4, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4640      	mov	r0, r8
 80065f2:	4649      	mov	r1, r9
 80065f4:	f7f9 ffcc 	bl	8000590 <__aeabi_dmul>
 80065f8:	2200      	movs	r2, #0
 80065fa:	e9cd 0100 	strd	r0, r1, [sp]
 80065fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006602:	4620      	mov	r0, r4
 8006604:	4629      	mov	r1, r5
 8006606:	f7f9 fe0b 	bl	8000220 <__aeabi_dsub>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006612:	f7fa f8e7 	bl	80007e4 <__aeabi_ddiv>
 8006616:	4632      	mov	r2, r6
 8006618:	4604      	mov	r4, r0
 800661a:	460d      	mov	r5, r1
 800661c:	463b      	mov	r3, r7
 800661e:	4640      	mov	r0, r8
 8006620:	4649      	mov	r1, r9
 8006622:	f7f9 ffb5 	bl	8000590 <__aeabi_dmul>
 8006626:	4632      	mov	r2, r6
 8006628:	463b      	mov	r3, r7
 800662a:	f7f9 fdfb 	bl	8000224 <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4620      	mov	r0, r4
 8006634:	4629      	mov	r1, r5
 8006636:	f7f9 fdf3 	bl	8000220 <__aeabi_dsub>
 800663a:	4642      	mov	r2, r8
 800663c:	464b      	mov	r3, r9
 800663e:	f7f9 fdef 	bl	8000220 <__aeabi_dsub>
 8006642:	460b      	mov	r3, r1
 8006644:	4602      	mov	r2, r0
 8006646:	493b      	ldr	r1, [pc, #236]	@ (8006734 <__ieee754_pow+0xa6c>)
 8006648:	2000      	movs	r0, #0
 800664a:	f7f9 fde9 	bl	8000220 <__aeabi_dsub>
 800664e:	ec41 0b10 	vmov	d0, r0, r1
 8006652:	ee10 3a90 	vmov	r3, s1
 8006656:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800665a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800665e:	da30      	bge.n	80066c2 <__ieee754_pow+0x9fa>
 8006660:	4650      	mov	r0, sl
 8006662:	f000 f87d 	bl	8006760 <scalbn>
 8006666:	ec51 0b10 	vmov	r0, r1, d0
 800666a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800666e:	f7ff bbd2 	b.w	8005e16 <__ieee754_pow+0x14e>
 8006672:	4c31      	ldr	r4, [pc, #196]	@ (8006738 <__ieee754_pow+0xa70>)
 8006674:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006678:	42a3      	cmp	r3, r4
 800667a:	d91a      	bls.n	80066b2 <__ieee754_pow+0x9ea>
 800667c:	4b2f      	ldr	r3, [pc, #188]	@ (800673c <__ieee754_pow+0xa74>)
 800667e:	440b      	add	r3, r1
 8006680:	4303      	orrs	r3, r0
 8006682:	d009      	beq.n	8006698 <__ieee754_pow+0x9d0>
 8006684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006688:	2200      	movs	r2, #0
 800668a:	2300      	movs	r3, #0
 800668c:	f7fa f9f2 	bl	8000a74 <__aeabi_dcmplt>
 8006690:	3800      	subs	r0, #0
 8006692:	bf18      	it	ne
 8006694:	2001      	movne	r0, #1
 8006696:	e42b      	b.n	8005ef0 <__ieee754_pow+0x228>
 8006698:	4642      	mov	r2, r8
 800669a:	464b      	mov	r3, r9
 800669c:	f7f9 fdc0 	bl	8000220 <__aeabi_dsub>
 80066a0:	4632      	mov	r2, r6
 80066a2:	463b      	mov	r3, r7
 80066a4:	f7fa f9fa 	bl	8000a9c <__aeabi_dcmpge>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d1eb      	bne.n	8006684 <__ieee754_pow+0x9bc>
 80066ac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800674c <__ieee754_pow+0xa84>
 80066b0:	e6f7      	b.n	80064a2 <__ieee754_pow+0x7da>
 80066b2:	469a      	mov	sl, r3
 80066b4:	4b22      	ldr	r3, [pc, #136]	@ (8006740 <__ieee754_pow+0xa78>)
 80066b6:	459a      	cmp	sl, r3
 80066b8:	f63f aef3 	bhi.w	80064a2 <__ieee754_pow+0x7da>
 80066bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80066c0:	e715      	b.n	80064ee <__ieee754_pow+0x826>
 80066c2:	ec51 0b10 	vmov	r0, r1, d0
 80066c6:	4619      	mov	r1, r3
 80066c8:	e7cf      	b.n	800666a <__ieee754_pow+0x9a2>
 80066ca:	491a      	ldr	r1, [pc, #104]	@ (8006734 <__ieee754_pow+0xa6c>)
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7ff bb18 	b.w	8005d02 <__ieee754_pow+0x3a>
 80066d2:	2000      	movs	r0, #0
 80066d4:	2100      	movs	r1, #0
 80066d6:	f7ff bb14 	b.w	8005d02 <__ieee754_pow+0x3a>
 80066da:	4630      	mov	r0, r6
 80066dc:	4639      	mov	r1, r7
 80066de:	f7ff bb10 	b.w	8005d02 <__ieee754_pow+0x3a>
 80066e2:	460c      	mov	r4, r1
 80066e4:	f7ff bb5e 	b.w	8005da4 <__ieee754_pow+0xdc>
 80066e8:	2400      	movs	r4, #0
 80066ea:	f7ff bb49 	b.w	8005d80 <__ieee754_pow+0xb8>
 80066ee:	bf00      	nop
 80066f0:	00000000 	.word	0x00000000
 80066f4:	3fe62e43 	.word	0x3fe62e43
 80066f8:	fefa39ef 	.word	0xfefa39ef
 80066fc:	3fe62e42 	.word	0x3fe62e42
 8006700:	0ca86c39 	.word	0x0ca86c39
 8006704:	be205c61 	.word	0xbe205c61
 8006708:	72bea4d0 	.word	0x72bea4d0
 800670c:	3e663769 	.word	0x3e663769
 8006710:	c5d26bf1 	.word	0xc5d26bf1
 8006714:	3ebbbd41 	.word	0x3ebbbd41
 8006718:	af25de2c 	.word	0xaf25de2c
 800671c:	3f11566a 	.word	0x3f11566a
 8006720:	16bebd93 	.word	0x16bebd93
 8006724:	3f66c16c 	.word	0x3f66c16c
 8006728:	5555553e 	.word	0x5555553e
 800672c:	3fc55555 	.word	0x3fc55555
 8006730:	fff00000 	.word	0xfff00000
 8006734:	3ff00000 	.word	0x3ff00000
 8006738:	4090cbff 	.word	0x4090cbff
 800673c:	3f6f3400 	.word	0x3f6f3400
 8006740:	3fe00000 	.word	0x3fe00000
 8006744:	652b82fe 	.word	0x652b82fe
 8006748:	3c971547 	.word	0x3c971547
 800674c:	4090cc00 	.word	0x4090cc00

08006750 <fabs>:
 8006750:	ec51 0b10 	vmov	r0, r1, d0
 8006754:	4602      	mov	r2, r0
 8006756:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800675a:	ec43 2b10 	vmov	d0, r2, r3
 800675e:	4770      	bx	lr

08006760 <scalbn>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	ec55 4b10 	vmov	r4, r5, d0
 8006766:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800676a:	4606      	mov	r6, r0
 800676c:	462b      	mov	r3, r5
 800676e:	b991      	cbnz	r1, 8006796 <scalbn+0x36>
 8006770:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006774:	4323      	orrs	r3, r4
 8006776:	d03d      	beq.n	80067f4 <scalbn+0x94>
 8006778:	4b35      	ldr	r3, [pc, #212]	@ (8006850 <scalbn+0xf0>)
 800677a:	4620      	mov	r0, r4
 800677c:	4629      	mov	r1, r5
 800677e:	2200      	movs	r2, #0
 8006780:	f7f9 ff06 	bl	8000590 <__aeabi_dmul>
 8006784:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <scalbn+0xf4>)
 8006786:	429e      	cmp	r6, r3
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	da0f      	bge.n	80067ae <scalbn+0x4e>
 800678e:	a328      	add	r3, pc, #160	@ (adr r3, 8006830 <scalbn+0xd0>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	e01e      	b.n	80067d4 <scalbn+0x74>
 8006796:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800679a:	4291      	cmp	r1, r2
 800679c:	d10b      	bne.n	80067b6 <scalbn+0x56>
 800679e:	4622      	mov	r2, r4
 80067a0:	4620      	mov	r0, r4
 80067a2:	4629      	mov	r1, r5
 80067a4:	f7f9 fd3e 	bl	8000224 <__adddf3>
 80067a8:	4604      	mov	r4, r0
 80067aa:	460d      	mov	r5, r1
 80067ac:	e022      	b.n	80067f4 <scalbn+0x94>
 80067ae:	460b      	mov	r3, r1
 80067b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80067b4:	3936      	subs	r1, #54	@ 0x36
 80067b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80067ba:	4296      	cmp	r6, r2
 80067bc:	dd0d      	ble.n	80067da <scalbn+0x7a>
 80067be:	2d00      	cmp	r5, #0
 80067c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006838 <scalbn+0xd8>)
 80067c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c6:	da02      	bge.n	80067ce <scalbn+0x6e>
 80067c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006840 <scalbn+0xe0>)
 80067ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8006838 <scalbn+0xd8>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7f9 fedc 	bl	8000590 <__aeabi_dmul>
 80067d8:	e7e6      	b.n	80067a8 <scalbn+0x48>
 80067da:	1872      	adds	r2, r6, r1
 80067dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80067e0:	428a      	cmp	r2, r1
 80067e2:	dcec      	bgt.n	80067be <scalbn+0x5e>
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	dd08      	ble.n	80067fa <scalbn+0x9a>
 80067e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80067ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80067f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067f4:	ec45 4b10 	vmov	d0, r4, r5
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80067fe:	da08      	bge.n	8006812 <scalbn+0xb2>
 8006800:	2d00      	cmp	r5, #0
 8006802:	a10b      	add	r1, pc, #44	@ (adr r1, 8006830 <scalbn+0xd0>)
 8006804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006808:	dac1      	bge.n	800678e <scalbn+0x2e>
 800680a:	a10f      	add	r1, pc, #60	@ (adr r1, 8006848 <scalbn+0xe8>)
 800680c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006810:	e7bd      	b.n	800678e <scalbn+0x2e>
 8006812:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006816:	3236      	adds	r2, #54	@ 0x36
 8006818:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800681c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006820:	4620      	mov	r0, r4
 8006822:	4b0d      	ldr	r3, [pc, #52]	@ (8006858 <scalbn+0xf8>)
 8006824:	4629      	mov	r1, r5
 8006826:	2200      	movs	r2, #0
 8006828:	e7d4      	b.n	80067d4 <scalbn+0x74>
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w
 8006830:	c2f8f359 	.word	0xc2f8f359
 8006834:	01a56e1f 	.word	0x01a56e1f
 8006838:	8800759c 	.word	0x8800759c
 800683c:	7e37e43c 	.word	0x7e37e43c
 8006840:	8800759c 	.word	0x8800759c
 8006844:	fe37e43c 	.word	0xfe37e43c
 8006848:	c2f8f359 	.word	0xc2f8f359
 800684c:	81a56e1f 	.word	0x81a56e1f
 8006850:	43500000 	.word	0x43500000
 8006854:	ffff3cb0 	.word	0xffff3cb0
 8006858:	3c900000 	.word	0x3c900000

0800685c <with_errno>:
 800685c:	b510      	push	{r4, lr}
 800685e:	ed2d 8b02 	vpush	{d8}
 8006862:	eeb0 8a40 	vmov.f32	s16, s0
 8006866:	eef0 8a60 	vmov.f32	s17, s1
 800686a:	4604      	mov	r4, r0
 800686c:	f7ff f978 	bl	8005b60 <__errno>
 8006870:	eeb0 0a48 	vmov.f32	s0, s16
 8006874:	eef0 0a68 	vmov.f32	s1, s17
 8006878:	ecbd 8b02 	vpop	{d8}
 800687c:	6004      	str	r4, [r0, #0]
 800687e:	bd10      	pop	{r4, pc}

08006880 <xflow>:
 8006880:	4603      	mov	r3, r0
 8006882:	b507      	push	{r0, r1, r2, lr}
 8006884:	ec51 0b10 	vmov	r0, r1, d0
 8006888:	b183      	cbz	r3, 80068ac <xflow+0x2c>
 800688a:	4602      	mov	r2, r0
 800688c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006890:	e9cd 2300 	strd	r2, r3, [sp]
 8006894:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006898:	f7f9 fe7a 	bl	8000590 <__aeabi_dmul>
 800689c:	ec41 0b10 	vmov	d0, r0, r1
 80068a0:	2022      	movs	r0, #34	@ 0x22
 80068a2:	b003      	add	sp, #12
 80068a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a8:	f7ff bfd8 	b.w	800685c <with_errno>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	e7ee      	b.n	8006890 <xflow+0x10>
 80068b2:	0000      	movs	r0, r0
 80068b4:	0000      	movs	r0, r0
	...

080068b8 <__math_uflow>:
 80068b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80068c0 <__math_uflow+0x8>
 80068bc:	f7ff bfe0 	b.w	8006880 <xflow>
 80068c0:	00000000 	.word	0x00000000
 80068c4:	10000000 	.word	0x10000000

080068c8 <__math_oflow>:
 80068c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80068d0 <__math_oflow+0x8>
 80068cc:	f7ff bfd8 	b.w	8006880 <xflow>
 80068d0:	00000000 	.word	0x00000000
 80068d4:	70000000 	.word	0x70000000

080068d8 <__ieee754_sqrt>:
 80068d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	4a68      	ldr	r2, [pc, #416]	@ (8006a80 <__ieee754_sqrt+0x1a8>)
 80068de:	ec55 4b10 	vmov	r4, r5, d0
 80068e2:	43aa      	bics	r2, r5
 80068e4:	462b      	mov	r3, r5
 80068e6:	4621      	mov	r1, r4
 80068e8:	d110      	bne.n	800690c <__ieee754_sqrt+0x34>
 80068ea:	4622      	mov	r2, r4
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fe4e 	bl	8000590 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4620      	mov	r0, r4
 80068fa:	4629      	mov	r1, r5
 80068fc:	f7f9 fc92 	bl	8000224 <__adddf3>
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	ec45 4b10 	vmov	d0, r4, r5
 8006908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690c:	2d00      	cmp	r5, #0
 800690e:	dc0e      	bgt.n	800692e <__ieee754_sqrt+0x56>
 8006910:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006914:	4322      	orrs	r2, r4
 8006916:	d0f5      	beq.n	8006904 <__ieee754_sqrt+0x2c>
 8006918:	b19d      	cbz	r5, 8006942 <__ieee754_sqrt+0x6a>
 800691a:	4622      	mov	r2, r4
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7f9 fc7e 	bl	8000220 <__aeabi_dsub>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	f7f9 ff5c 	bl	80007e4 <__aeabi_ddiv>
 800692c:	e7e8      	b.n	8006900 <__ieee754_sqrt+0x28>
 800692e:	152a      	asrs	r2, r5, #20
 8006930:	d115      	bne.n	800695e <__ieee754_sqrt+0x86>
 8006932:	2000      	movs	r0, #0
 8006934:	e009      	b.n	800694a <__ieee754_sqrt+0x72>
 8006936:	0acb      	lsrs	r3, r1, #11
 8006938:	3a15      	subs	r2, #21
 800693a:	0549      	lsls	r1, r1, #21
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0fa      	beq.n	8006936 <__ieee754_sqrt+0x5e>
 8006940:	e7f7      	b.n	8006932 <__ieee754_sqrt+0x5a>
 8006942:	462a      	mov	r2, r5
 8006944:	e7fa      	b.n	800693c <__ieee754_sqrt+0x64>
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	3001      	adds	r0, #1
 800694a:	02dc      	lsls	r4, r3, #11
 800694c:	d5fb      	bpl.n	8006946 <__ieee754_sqrt+0x6e>
 800694e:	1e44      	subs	r4, r0, #1
 8006950:	1b12      	subs	r2, r2, r4
 8006952:	f1c0 0420 	rsb	r4, r0, #32
 8006956:	fa21 f404 	lsr.w	r4, r1, r4
 800695a:	4323      	orrs	r3, r4
 800695c:	4081      	lsls	r1, r0
 800695e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006962:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800696a:	07d2      	lsls	r2, r2, #31
 800696c:	bf5c      	itt	pl
 800696e:	005b      	lslpl	r3, r3, #1
 8006970:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006978:	bf58      	it	pl
 800697a:	0049      	lslpl	r1, r1, #1
 800697c:	2600      	movs	r6, #0
 800697e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006982:	106d      	asrs	r5, r5, #1
 8006984:	0049      	lsls	r1, r1, #1
 8006986:	2016      	movs	r0, #22
 8006988:	4632      	mov	r2, r6
 800698a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800698e:	1917      	adds	r7, r2, r4
 8006990:	429f      	cmp	r7, r3
 8006992:	bfde      	ittt	le
 8006994:	193a      	addle	r2, r7, r4
 8006996:	1bdb      	suble	r3, r3, r7
 8006998:	1936      	addle	r6, r6, r4
 800699a:	0fcf      	lsrs	r7, r1, #31
 800699c:	3801      	subs	r0, #1
 800699e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80069a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80069aa:	d1f0      	bne.n	800698e <__ieee754_sqrt+0xb6>
 80069ac:	4604      	mov	r4, r0
 80069ae:	2720      	movs	r7, #32
 80069b0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80069b4:	429a      	cmp	r2, r3
 80069b6:	eb00 0e0c 	add.w	lr, r0, ip
 80069ba:	db02      	blt.n	80069c2 <__ieee754_sqrt+0xea>
 80069bc:	d113      	bne.n	80069e6 <__ieee754_sqrt+0x10e>
 80069be:	458e      	cmp	lr, r1
 80069c0:	d811      	bhi.n	80069e6 <__ieee754_sqrt+0x10e>
 80069c2:	f1be 0f00 	cmp.w	lr, #0
 80069c6:	eb0e 000c 	add.w	r0, lr, ip
 80069ca:	da42      	bge.n	8006a52 <__ieee754_sqrt+0x17a>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	db40      	blt.n	8006a52 <__ieee754_sqrt+0x17a>
 80069d0:	f102 0801 	add.w	r8, r2, #1
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	458e      	cmp	lr, r1
 80069d8:	bf88      	it	hi
 80069da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80069de:	eba1 010e 	sub.w	r1, r1, lr
 80069e2:	4464      	add	r4, ip
 80069e4:	4642      	mov	r2, r8
 80069e6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80069ea:	3f01      	subs	r7, #1
 80069ec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80069f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069f4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80069f8:	d1dc      	bne.n	80069b4 <__ieee754_sqrt+0xdc>
 80069fa:	4319      	orrs	r1, r3
 80069fc:	d01b      	beq.n	8006a36 <__ieee754_sqrt+0x15e>
 80069fe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006a84 <__ieee754_sqrt+0x1ac>
 8006a02:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006a88 <__ieee754_sqrt+0x1b0>
 8006a06:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a0a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a0e:	f7f9 fc07 	bl	8000220 <__aeabi_dsub>
 8006a12:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	f7fa f833 	bl	8000a88 <__aeabi_dcmple>
 8006a22:	b140      	cbz	r0, 8006a36 <__ieee754_sqrt+0x15e>
 8006a24:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a28:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a2c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a30:	d111      	bne.n	8006a56 <__ieee754_sqrt+0x17e>
 8006a32:	3601      	adds	r6, #1
 8006a34:	463c      	mov	r4, r7
 8006a36:	1072      	asrs	r2, r6, #1
 8006a38:	0863      	lsrs	r3, r4, #1
 8006a3a:	07f1      	lsls	r1, r6, #31
 8006a3c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006a40:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006a44:	bf48      	it	mi
 8006a46:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006a4a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006a4e:	4618      	mov	r0, r3
 8006a50:	e756      	b.n	8006900 <__ieee754_sqrt+0x28>
 8006a52:	4690      	mov	r8, r2
 8006a54:	e7be      	b.n	80069d4 <__ieee754_sqrt+0xfc>
 8006a56:	f7f9 fbe5 	bl	8000224 <__adddf3>
 8006a5a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7fa f805 	bl	8000a74 <__aeabi_dcmplt>
 8006a6a:	b120      	cbz	r0, 8006a76 <__ieee754_sqrt+0x19e>
 8006a6c:	1ca0      	adds	r0, r4, #2
 8006a6e:	bf08      	it	eq
 8006a70:	3601      	addeq	r6, #1
 8006a72:	3402      	adds	r4, #2
 8006a74:	e7df      	b.n	8006a36 <__ieee754_sqrt+0x15e>
 8006a76:	1c63      	adds	r3, r4, #1
 8006a78:	f023 0401 	bic.w	r4, r3, #1
 8006a7c:	e7db      	b.n	8006a36 <__ieee754_sqrt+0x15e>
 8006a7e:	bf00      	nop
 8006a80:	7ff00000 	.word	0x7ff00000
 8006a84:	20000070 	.word	0x20000070
 8006a88:	20000068 	.word	0x20000068

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
